{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programming\\\\TAMU\\\\CSCE 331\\\\cfa-pos\\\\src\\\\customer_pages\\\\popups\\\\confirmItem.js\";\nimport { disableButtons, enableButtons } from './buttonToggle.js';\nimport '../menuOrdering.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isPoppedUp = false;\n\n/**\r\n * rows holds all of the modifications for the menu item that is currently loaded.\r\n */\nconst rows = [];\n\n//holds all of the data pertaining to counting how many modifications are made. this has a one to one correlation with rows.\nconst count_mods = [];\n\n//used to track original state of count_mods, true if count_mods[i] == 1, false if count_mods[i] == 0\nconst startAsOneCheckers = [];\n\n/**\r\n * MyComponent is a function that auto-generates div's based on the item.customs object property in the productsAndIngredients.js.\r\n * For example, if I had three items in custom, the function would auto-generate 3 divs with buttons.\r\n */\n\nexport const MyComponent = function () {\n  const divElements = [];\n  // this function populates the menu item with all of the proper modifications\n  // the plus and minus buttons need functionality\n  let count = 0;\n  for (let i = 0; i < rows.length; i++) {\n    divElements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-24 grid grid-cols-4 gap-3 content-start  ...\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 px-4 py-2 mt-4 mr-1 rounded\",\n          children: [\" \", rows[i], \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 22\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"plusMod\",\n          className: \"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"counter\",\n        className: \"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\",\n        children: [\" \", count_mods[i], \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"minusMod\",\n          className: \"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\",\n          children: \"-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-scroll h-64\",\n    children: divElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 12\n  }, this);\n};\n/**\r\n * If an item is clicked, this handler is called in order to make sure that a few things can happen.\r\n * The first thing is that the item properly needs to load, which is why item is a parameter in our function.\r\n * The next thing it needs to achieve is make sure that the modifications are loading properly,\r\n * and that buttons with listeners are also being assigned and removed when needed.\r\n * @param item\r\n * @param handleCartItems\r\n */\n_c = MyComponent;\nexport const confirmItemPopUp = (item, handleCartItems) => {\n  if (!isPoppedUp) {\n    // Only allow addPopup buttons to be clicked\n    disableButtons();\n\n    /////////////\n    // Pop Ups //\n    /////////////\n\n    // Add item to order pop up\n    /**\r\n     * This const is used as a generic template to load the products when the button is pressed.\r\n     * @type {string}\r\n     */\n    const addToOrderPopup = `\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\n            <p class=\"text-gray-600\">Price: $${item.price}</p>\n            <button id=\"customizeBtn\" class=\"bg-blue-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Customize Ingredients</button>\n            <input type=\"number\" id=\"quantityInput\" class=\"border border-gray-400 px-4 py-2 mt-4 mr-4 rounded\" min=\"1\" max=\"10\" value=\"1\">\n            <button id=\"addToOrderBtn\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Add to Your Order</button>\n            <button id=\"cancelBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 absolute top-0 right-0 mr-4 mt-4 rounded\">Cancel</button>\n        `;\n    //turn this into a function!\n\n    // Customize item pop up\n    /**\r\n     * This const is used as a templated for the modifications needed for loading the proper data.\r\n     * @type {string}\r\n     */\n    const customizeIngredientsPopup = `\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\n  \n                <div id=\"my-component-container\"></div>\n\n                \n            <p class=\"text-gray-600\">Price: $${item.price}</p>              \n                    \n            <button id=\"cancelCustomizeBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Cancel Changes</button>\n            <button id=\"customizeItem\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Save Changes</button>\n        `;\n\n    // Create addPopup\n    const addPopup = document.createElement(\"div\");\n    addPopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\n    //addPopup.insertAdjacentHTML();\n    addPopup.innerHTML = addToOrderPopup;\n\n    // Create customizePopup\n    const customizePopup = document.createElement(\"div\");\n    customizePopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\n    customizePopup.innerHTML = customizeIngredientsPopup;\n\n    // Allow dimming of non-addPopup elements\n    const dimElement = document.createElement(\"div\");\n    dimElement.classList.add(\"fixed\", \"inset-0\", \"bg-black\", \"opacity-50\", \"z-40\");\n\n    // Dim non-addPopup elements and add addPopup\n    document.body.appendChild(dimElement);\n    document.body.appendChild(addPopup);\n    isPoppedUp = true;\n\n    //////////////////////\n    // Pop up buttons //\n    //////////////////////\n\n    // Add \"Cancel\" button to close pop-up\n    const cancelItemButton = document.getElementById(\"cancelBtn\");\n    const addToOrderBtn = document.getElementById(\"addToOrderBtn\");\n    const customizeBtn = document.getElementById(\"customizeBtn\");\n\n    // Define the event handler function for \"Cancel\" button\n    /**\r\n     * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n     * and adding new listeners when needed.\r\n     */\n    const handleCancelClick = function () {\n      item.modifications = [{\n        type: '+',\n        changes: []\n      }, {\n        type: '-',\n        changes: []\n      }];\n\n      // Close the addPopup\n      document.body.removeChild(addPopup);\n      document.body.removeChild(dimElement);\n      isPoppedUp = false;\n\n      // Enable all buttons outside the addPopup\n      enableButtons();\n\n      // Remove the event listener after it's been triggered\n      cancelItemButton.removeEventListener(\"click\", handleCancelClick);\n      while (rows.length > 0) {\n        rows.pop();\n      }\n      while (count_mods.length > 0) {\n        count_mods.pop();\n        startAsOneCheckers.pop();\n        console.log(\"poppin\");\n      }\n      rows.length = 0;\n      count_mods.length = 0;\n      startAsOneCheckers.length = 0;\n    };\n    /**\r\n     * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n     * and adding new listeners when needed.\r\n     */\n    // Define the event handler function for \"Add to Order\" button\n    const handleAddToOrderClick = function () {\n      // Handle add to order functionality with quantity\n      const quantityInput = document.getElementById(\"quantityInput\");\n      // Update the item object with the quantity\n      item.quantity = parseInt(quantityInput.value);\n      handleCartItems(item);\n\n      // Close the addPopup\n      document.body.removeChild(addPopup);\n      document.body.removeChild(dimElement);\n      isPoppedUp = false;\n\n      // Enable all buttons outside the addPopup\n      enableButtons();\n\n      // Remove the event listener after it's been triggered\n\n      addToOrderBtn.removeEventListener(\"click\", handleAddToOrderClick);\n      while (rows.length > 0) {\n        rows.pop();\n      }\n      while (count_mods.length > 0) {\n        count_mods.pop();\n      }\n      item.modifications = [{\n        type: '+',\n        changes: []\n      }, {\n        type: '-',\n        changes: []\n      }];\n    };\n\n    /**\r\n     * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n     * and adding new listeners when needed.\r\n     */\n    // Define the event handler function for \"Customize\" button\n    const handleCustomizeClick = function () {\n      for (let i = 0; i < item.custom.length + 1; i++) {\n        // if an ingredient is in custom, this will be made true.\n        // if an ingredient starts at 1 for a default then\n        // this will be made true\n        //\n        //let startAsDefault = false;\n\n        for (let j = 0; j < item.ingredients.length; j++) {\n          if (item.custom[j] === item.ingredients[i]) {\n            count_mods[j] = 1;\n            //startAsDefault = true;\n            console.log(\"rows[j] = \" + item.ingredients[j]);\n            //startAsOneCheckers.push(true);\n            startAsOneCheckers[j] = true;\n            //item.modifications.find(mod => mod.type === '+').changes.push(item.ingredients[j]);\n            //break;\n          }\n        }\n        //startAsOneCheckers.push(false);\n        rows.push(item.custom[i]);\n        //we start all modifications at zero, if .\n        count_mods[i] = 0;\n        startAsOneCheckers[i] = false;\n      }\n      count_mods.pop();\n      rows.pop();\n      startAsOneCheckers.pop();\n      console.log(count_mods);\n      console.log(startAsOneCheckers);\n\n      //startAsOneCheckers.pop()\n\n      document.body.removeChild(addPopup);\n      document.body.appendChild(customizePopup);\n      //this render component autogenerated the modifications div elements everytime the handle customize is clicked\n\n      ReactDOM.render( /*#__PURE__*/_jsxDEV(MyComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 29\n      }, this), document.getElementById('my-component-container'));\n\n      //minimize these functions on the left :0 --> handlePlusMod, --> handleMinusMod\n      const handlePlusMod = num => {\n        //code is very convoluted, sorry in advance but im scared of touching anything because it could break :D\n        //message me if you need an explanation on the code!!!\n        //handleMinusMod is much easier to go through, I would recommend going through there if contacting me isn't time efficient\n\n        return function () {\n          let toMod;\n          toMod = rows[num];\n          console.log(\"plus: \" + toMod);\n\n          //i track count_mods[num] to make sure it goes from 0 - 2 range.\n          if (count_mods[num] < 2 && count_mods[num] >= 0) {\n            count_mods[num] = count_mods[num] + 1;\n            if (count_mods[num] > 2) {\n              count_mods[num] = 2;\n              return;\n            }\n            //if we start at 1 (ie: a default ingredient), like pickles on a chicken sandwich\n            //some of this code might not even be used tbh im scared to touch it tbh\n            if (startAsOneCheckers[num] === true) {\n              if (count_mods[num] === 1) {\n                console.log(\"countnums (plus): \" + count_mods[num]);\n                console.log(\"rows (plus): \" + rows[num]);\n\n                //item.modifications.find(mod => mod.type === '-').changes.pop();\n                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num]);\n                console.log(\"Index (plus): \" + index);\n                if (index !== -1) {\n                  item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\n                }\n              }\n              if (count_mods[num] === 2) {\n                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\n              }\n              if (count_mods[num] === 0) {\n                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\n              }\n            }\n            //if we start at 0, ie: ingredients you can add on, but are not default on the item, like tomatoes on a chicken sandwich\n            //ditto above statement D:\n            else if (startAsOneCheckers[num] === false) {\n              if (count_mods[num] === 1) {\n                //item.modifications.find(mod => mod.type === '-').changes.pop();\n                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num]);\n                if (index !== -1) {\n                  item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\n                  console.log(\"test plus 1\");\n                }\n                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\n              }\n              if (count_mods[num] === 2) {\n                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\n              }\n              if (count_mods[num] === 0) {\n                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\n              }\n              console.log(count_mods[num]);\n            }\n            ReactDOM.render( /*#__PURE__*/_jsxDEV(MyComponent, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 41\n            }, this), document.getElementById('my-component-container'));\n            console.log(item.modifications.filter(mod => mod.type === '+'));\n          }\n        };\n      };\n      const handleMinusMod = num => {\n        return function () {\n          let toMod;\n          toMod = rows[num];\n          //same logic as plus, but flipped logic,\n          // this code is much more concise and easier to read through if you're just trying to get a basic understanding\n          // of my modification logic\n\n          if (count_mods[num] <= 2 && count_mods[num] >= 0) {\n            count_mods[num] = count_mods[num] - 1;\n            if (count_mods[num] < 0) {\n              count_mods[num] = 0;\n              return;\n            }\n            if (item.modifications) {\n              const plusMod = item.modifications.find(mod => mod.type === '+');\n              if (plusMod) {\n                //console.log(\"count_mod[num]: \" + count_mods[num]);\n                console.log(\"rows[num]: \" + rows[num]);\n                if (startAsOneCheckers[num] === true) {\n                  if (count_mods[num] === 0) {\n                    console.log(\"minus === 0\");\n                    let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num]);\n                    //item.modifications.find(mod => mod.type === '+').changes.pop();\n                    console.log(\"Index (minus) :\" + index);\n                    if (index !== -1) {\n                      console.log(\"index: \" + index);\n                      item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\n                    }\n                    item.modifications.find(mod => mod.type === '-').changes.push(toMod);\n                  }\n                  if (count_mods[num] === 1) {\n                    /*while( item.modifications.find(mod => mod.type === '+').changes.length > 0){\r\n                        item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                    }*/\n                    let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num]);\n                    if (index !== -1) {\n                      item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\n                    }\n                  }\n                  if (count_mods[num] === 2) {\n                    //item.modifications.find(mod => mod.type === '+').changes.pop();\n                    let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num]);\n                    if (index !== -1) {\n                      item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\n                    }\n                  }\n                }\n                //console.log(\"start as checker test: \" + startAsOneCheckers[num])\n\n                if (startAsOneCheckers[num] === false) {\n                  if (count_mods[num] === 0) {\n                    //console.log(\"test 0 case again..\")\n                    let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num]);\n                    if (index !== -1) {\n                      item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\n                    }\n                    //item.modifications.find(mod => mod.type === '+').changes.pop();\n\n                    //item.modifications.find(mod => mod.type === '-').changes.push(toMod);\n                  }\n\n                  if (count_mods[num] === 1) {\n                    //console.log(\"test 1 case again..\")\n                    //console.log(\"minus: \" + toMod);\n                    let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num]);\n                    if (index !== -1) {\n                      item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\n                    }\n                  }\n                }\n              }\n            }\n            ReactDOM.render( /*#__PURE__*/_jsxDEV(MyComponent, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 41\n            }, this), document.getElementById('my-component-container'));\n          }\n        };\n      };\n      const displayCountModNumbers = document.getElementsByClassName(\"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\");\n      const plusMods = document.getElementsByClassName(\"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\n      const minusMods = document.getElementsByClassName(\"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\n      for (let i = 0; i < plusMods.length; i++) {\n        plusMods[i].addEventListener(\"click\", handlePlusMod(i));\n      }\n      for (let i = 0; i < displayCountModNumbers.length; i++) {\n        minusMods[i].addEventListener(\"click\", handleMinusMod(i));\n      }\n      const saveCustomizeButton = document.getElementById(\"customizeItem\");\n      //Define the event handler function for \"Cancel\" button in customizePopup\n      const handleSaveCustomizeClick = function () {\n        document.body.removeChild(customizePopup);\n        document.body.appendChild(addPopup);\n\n        // Remove the event listener after it's been triggered\n        saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\n        cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\n        //console.log(item.modifications.find(mod => mod.type === '+').toString());\n\n        //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\n\n        rows.length = 0;\n        count_mods.length = 0;\n      };\n      const cancelCustomizeButton = document.getElementById(\"cancelCustomizeBtn\");\n      const handleCancelCustomizeClick = function () {\n        document.body.removeChild(customizePopup);\n        document.body.appendChild(addPopup);\n        while (rows.length > 0) {\n          rows.pop();\n        }\n        while (count_mods.length > 0) {\n          count_mods.pop();\n          startAsOneCheckers.pop();\n          console.log(\"poppin\");\n        }\n        // Remove the event listener after it's been triggered\n        cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\n        saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\n      };\n      saveCustomizeButton.addEventListener(\"click\", handleSaveCustomizeClick);\n      cancelCustomizeButton.addEventListener(\"click\", handleCancelCustomizeClick);\n    };\n\n    // Attach event listeners to buttons\n    cancelItemButton.addEventListener(\"click\", handleCancelClick);\n    addToOrderBtn.addEventListener(\"click\", handleAddToOrderClick);\n    customizeBtn.addEventListener(\"click\", handleCustomizeClick);\n    //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["disableButtons","enableButtons","React","ReactDOM","jsxDEV","_jsxDEV","isPoppedUp","rows","count_mods","startAsOneCheckers","MyComponent","divElements","count","i","length","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","confirmItemPopUp","item","handleCartItems","addToOrderPopup","name","require","image","price","customizeIngredientsPopup","addPopup","document","createElement","innerHTML","customizePopup","dimElement","classList","add","body","appendChild","cancelItemButton","getElementById","addToOrderBtn","customizeBtn","handleCancelClick","modifications","type","changes","removeChild","removeEventListener","pop","console","log","handleAddToOrderClick","quantityInput","quantity","parseInt","value","handleCustomizeClick","custom","j","ingredients","render","handlePlusMod","num","toMod","index","find","mod","indexOf","splice","filter","handleMinusMod","plusMod","displayCountModNumbers","getElementsByClassName","plusMods","minusMods","addEventListener","saveCustomizeButton","handleSaveCustomizeClick","cancelCustomizeButton","handleCancelCustomizeClick","$RefreshReg$"],"sources":["C:/Programming/TAMU/CSCE 331/cfa-pos/src/customer_pages/popups/confirmItem.js"],"sourcesContent":["import {disableButtons, enableButtons} from './buttonToggle.js';\r\nimport '../menuOrdering.js';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nlet isPoppedUp = false;\r\n\r\n\r\n/**\r\n * rows holds all of the modifications for the menu item that is currently loaded.\r\n */\r\nconst rows = [];\r\n\r\n//holds all of the data pertaining to counting how many modifications are made. this has a one to one correlation with rows.\r\nconst count_mods = [];\r\n\r\n//used to track original state of count_mods, true if count_mods[i] == 1, false if count_mods[i] == 0\r\nconst startAsOneCheckers = [];\r\n\r\n/**\r\n * MyComponent is a function that auto-generates div's based on the item.customs object property in the productsAndIngredients.js.\r\n * For example, if I had three items in custom, the function would auto-generate 3 divs with buttons.\r\n */\r\n\r\nexport const MyComponent = function() {\r\n    const divElements = [];\r\n    // this function populates the menu item with all of the proper modifications\r\n    // the plus and minus buttons need functionality\r\n    let count = 0;\r\n    for (let i = 0; i < rows.length; i++) {\r\n        divElements.push(\r\n            <div className=\"h-24 grid grid-cols-4 gap-3 content-start  ...\">\r\n                <div><p className=\"text-gray-600 px-4 py-2 mt-4 mr-1 rounded\"> {rows[i]} </p> </div>\r\n                <div><button id=\"plusMod\" className=\"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\">+</button></div>\r\n                <div id={\"counter\"} className=\"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\"> {count_mods[i]} </div>\r\n                <div> <button id=\"minusMod\" className=\"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\">-</button></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <div className = \"overflow-y-scroll h-64\">{divElements}</div>;\r\n}\r\n/**\r\n * If an item is clicked, this handler is called in order to make sure that a few things can happen.\r\n * The first thing is that the item properly needs to load, which is why item is a parameter in our function.\r\n * The next thing it needs to achieve is make sure that the modifications are loading properly,\r\n * and that buttons with listeners are also being assigned and removed when needed.\r\n * @param item\r\n * @param handleCartItems\r\n */\r\nexport const confirmItemPopUp = (item, handleCartItems) => {\r\n\r\n    if (!isPoppedUp) {\r\n\r\n        // Only allow addPopup buttons to be clicked\r\n        disableButtons();\r\n\r\n        /////////////\r\n        // Pop Ups //\r\n        /////////////\r\n\r\n        // Add item to order pop up\r\n        /**\r\n         * This const is used as a generic template to load the products when the button is pressed.\r\n         * @type {string}\r\n         */\r\n        const addToOrderPopup = `\r\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\r\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\r\n            <p class=\"text-gray-600\">Price: $${item.price}</p>\r\n            <button id=\"customizeBtn\" class=\"bg-blue-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Customize Ingredients</button>\r\n            <input type=\"number\" id=\"quantityInput\" class=\"border border-gray-400 px-4 py-2 mt-4 mr-4 rounded\" min=\"1\" max=\"10\" value=\"1\">\r\n            <button id=\"addToOrderBtn\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Add to Your Order</button>\r\n            <button id=\"cancelBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 absolute top-0 right-0 mr-4 mt-4 rounded\">Cancel</button>\r\n        `;\r\n        //turn this into a function!\r\n\r\n\r\n        // Customize item pop up\r\n        /**\r\n         * This const is used as a templated for the modifications needed for loading the proper data.\r\n         * @type {string}\r\n         */\r\n        const customizeIngredientsPopup = `\r\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\r\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\r\n  \r\n                <div id=\"my-component-container\"></div>\r\n\r\n                \r\n            <p class=\"text-gray-600\">Price: $${item.price}</p>              \r\n                    \r\n            <button id=\"cancelCustomizeBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Cancel Changes</button>\r\n            <button id=\"customizeItem\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Save Changes</button>\r\n        `;\r\n\r\n        // Create addPopup\r\n        const addPopup = document.createElement(\"div\");\r\n        addPopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\r\n        //addPopup.insertAdjacentHTML();\r\n        addPopup.innerHTML = addToOrderPopup;\r\n\r\n        // Create customizePopup\r\n        const customizePopup = document.createElement(\"div\");\r\n        customizePopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\r\n        customizePopup.innerHTML = customizeIngredientsPopup;\r\n\r\n        // Allow dimming of non-addPopup elements\r\n        const dimElement = document.createElement(\"div\");\r\n        dimElement.classList.add(\"fixed\", \"inset-0\", \"bg-black\", \"opacity-50\", \"z-40\");\r\n\r\n        // Dim non-addPopup elements and add addPopup\r\n        document.body.appendChild(dimElement);\r\n        document.body.appendChild(addPopup);\r\n\r\n        isPoppedUp = true;\r\n\r\n        //////////////////////\r\n        // Pop up buttons //\r\n        //////////////////////\r\n\r\n        // Add \"Cancel\" button to close pop-up\r\n        const cancelItemButton = document.getElementById(\"cancelBtn\");\r\n        const addToOrderBtn = document.getElementById(\"addToOrderBtn\");\r\n        const customizeBtn = document.getElementById(\"customizeBtn\");\r\n\r\n\r\n        // Define the event handler function for \"Cancel\" button\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        const handleCancelClick = function() {\r\n\r\n            item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n            cancelItemButton.removeEventListener(\"click\", handleCancelClick);\r\n\r\n            while(rows.length > 0) {\r\n                rows.pop();\r\n            }\r\n            while(count_mods.length > 0){\r\n                count_mods.pop();\r\n                startAsOneCheckers.pop()\r\n                console.log(\"poppin\")\r\n            }\r\n\r\n            rows.length = 0;\r\n            count_mods.length = 0;\r\n            startAsOneCheckers.length = 0;\r\n\r\n        };\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        // Define the event handler function for \"Add to Order\" button\r\n        const handleAddToOrderClick = function() {\r\n            // Handle add to order functionality with quantity\r\n            const quantityInput = document.getElementById(\"quantityInput\");\r\n            // Update the item object with the quantity\r\n            item.quantity = parseInt(quantityInput.value);\r\n            handleCartItems(item);\r\n\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n\r\n            addToOrderBtn.removeEventListener(\"click\", handleAddToOrderClick);\r\n            while(rows.length > 0) {\r\n                rows.pop();\r\n            }\r\n            while(count_mods.length > 0){\r\n                count_mods.pop();\r\n            }\r\n            item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n        };\r\n\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        // Define the event handler function for \"Customize\" button\r\n        const handleCustomizeClick = function() {\r\n            for (let i = 0; i < item.custom.length + 1; i++) {\r\n                // if an ingredient is in custom, this will be made true.\r\n                // if an ingredient starts at 1 for a default then\r\n                // this will be made true\r\n                //\r\n                //let startAsDefault = false;\r\n\r\n                for(let j = 0; j < item.ingredients.length; j++) {\r\n\r\n                    if(item.custom[j] === item.ingredients[i])\r\n                    {\r\n                        count_mods[j] = 1;\r\n                        //startAsDefault = true;\r\n                        console.log(\"rows[j] = \" + item.ingredients[j])\r\n                        //startAsOneCheckers.push(true);\r\n                        startAsOneCheckers[j] = true;\r\n                        //item.modifications.find(mod => mod.type === '+').changes.push(item.ingredients[j]);\r\n                        //break;\r\n                    }\r\n\r\n                }\r\n                    //startAsOneCheckers.push(false);\r\n                    rows.push(item.custom[i]);\r\n                    //we start all modifications at zero, if .\r\n                    count_mods[i] = 0;\r\n                    startAsOneCheckers[i] = false;\r\n\r\n            }\r\n            count_mods.pop()\r\n            rows.pop()\r\n            startAsOneCheckers.pop()\r\n\r\n            console.log(count_mods)\r\n            console.log(startAsOneCheckers)\r\n\r\n            //startAsOneCheckers.pop()\r\n\r\n            document.body.removeChild(addPopup);\r\n            document.body.appendChild(customizePopup);\r\n            //this render component autogenerated the modifications div elements everytime the handle customize is clicked\r\n\r\n            ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n\r\n            //minimize these functions on the left :0 --> handlePlusMod, --> handleMinusMod\r\n            const handlePlusMod = (num) => {\r\n                //code is very convoluted, sorry in advance but im scared of touching anything because it could break :D\r\n                //message me if you need an explanation on the code!!!\r\n                //handleMinusMod is much easier to go through, I would recommend going through there if contacting me isn't time efficient\r\n\r\n                return function() {\r\n                    let toMod;\r\n                    toMod = rows[num]\r\n                    console.log(\"plus: \" + toMod);\r\n\r\n                    //i track count_mods[num] to make sure it goes from 0 - 2 range.\r\n                    if(count_mods[num] < 2 && count_mods[num]  >= 0) {\r\n                        count_mods[num] = count_mods[num] + 1;\r\n\r\n                        if(count_mods[num] > 2){\r\n                            count_mods[num] = 2;\r\n                            return;\r\n                        }\r\n                        //if we start at 1 (ie: a default ingredient), like pickles on a chicken sandwich\r\n                        //some of this code might not even be used tbh im scared to touch it tbh\r\n                        if(startAsOneCheckers[num] === true) {\r\n\r\n                            if (count_mods[num] === 1) {\r\n                                console.log(\"countnums (plus): \" + count_mods[num])\r\n                                console.log(\"rows (plus): \" + rows[num])\r\n\r\n                                //item.modifications.find(mod => mod.type === '-').changes.pop();\r\n                                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num])\r\n                                console.log(\"Index (plus): \" + index)\r\n                                if(index !== -1){\r\n                                    item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\r\n                                }\r\n                            }\r\n\r\n                            if (count_mods[num] === 2) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            if (count_mods[num] === 0) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n                        }\r\n                            //if we start at 0, ie: ingredients you can add on, but are not default on the item, like tomatoes on a chicken sandwich\r\n                        //ditto above statement D:\r\n\r\n                        else if(startAsOneCheckers[num] === false) {\r\n\r\n                            if (count_mods[num] === 1) {\r\n                                //item.modifications.find(mod => mod.type === '-').changes.pop();\r\n                                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num])\r\n                                if(index !== -1){\r\n                                    item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\r\n                                    console.log(\"test plus 1\");\r\n                                }\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n\r\n                            }\r\n\r\n                            if (count_mods[num] === 2) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            if (count_mods[num] === 0) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            console.log(count_mods[num]);\r\n                        }\r\n\r\n                        ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n                        console.log(item.modifications.filter(mod => mod.type === '+'));\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            const handleMinusMod = (num) => {\r\n                return function() {\r\n                    let toMod;\r\n                    toMod = rows[num]\r\n                    //same logic as plus, but flipped logic,\r\n                    // this code is much more concise and easier to read through if you're just trying to get a basic understanding\r\n                    // of my modification logic\r\n\r\n                    if(count_mods[num] <= 2 && count_mods[num]  >= 0) {\r\n                        count_mods[num] = count_mods[num] - 1;\r\n\r\n                        if(count_mods[num] < 0){\r\n                            count_mods[num] = 0;\r\n                            return;\r\n                        }\r\n\r\n                        if (item.modifications) {\r\n                            const plusMod = item.modifications.find(mod => mod.type === '+');\r\n\r\n                            if (plusMod) {\r\n                                //console.log(\"count_mod[num]: \" + count_mods[num]);\r\n                                console.log(\"rows[num]: \" + rows[num]);\r\n\r\n                                if(startAsOneCheckers[num] === true){\r\n                                    if(count_mods[num] === 0){\r\n                                        console.log(\"minus === 0\")\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        console.log(\"Index (minus) :\" + index)\r\n                                        if(index !== -1){\r\n                                            console.log(\"index: \" + index)\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                        item.modifications.find(mod => mod.type === '-').changes.push(toMod);\r\n\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 1) {\r\n                                        /*while( item.modifications.find(mod => mod.type === '+').changes.length > 0){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        }*/\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 2){\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //console.log(\"start as checker test: \" + startAsOneCheckers[num])\r\n\r\n                                if (startAsOneCheckers[num] === false){\r\n                                    if(count_mods[num] === 0){\r\n                                        //console.log(\"test 0 case again..\")\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n\r\n                                        //item.modifications.find(mod => mod.type === '-').changes.push(toMod);\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 1){\r\n                                        //console.log(\"test 1 case again..\")\r\n                                        //console.log(\"minus: \" + toMod);\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n\r\n\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n                    }\r\n\r\n                }\r\n            }\r\n            const displayCountModNumbers = document.getElementsByClassName(\"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\");\r\n            const plusMods = document.getElementsByClassName(\"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\r\n            const minusMods = document.getElementsByClassName(\"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\r\n\r\n            for (let i = 0; i < plusMods.length; i++) {\r\n                plusMods[i].addEventListener(\"click\", handlePlusMod(i) );\r\n            }\r\n            for (let i = 0; i < displayCountModNumbers.length; i++) {\r\n                minusMods[i].addEventListener(\"click\", handleMinusMod(i) );\r\n            }\r\n\r\n            const saveCustomizeButton = document.getElementById(\"customizeItem\");\r\n            //Define the event handler function for \"Cancel\" button in customizePopup\r\n            const handleSaveCustomizeClick = function() {\r\n                document.body.removeChild(customizePopup);\r\n                document.body.appendChild(addPopup);\r\n\r\n\r\n                // Remove the event listener after it's been triggered\r\n                saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\r\n                cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\r\n                //console.log(item.modifications.find(mod => mod.type === '+').toString());\r\n\r\n                //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n\r\n                rows.length = 0;\r\n                count_mods.length = 0;\r\n\r\n            };\r\n\r\n            const cancelCustomizeButton = document.getElementById(\"cancelCustomizeBtn\");\r\n\r\n            const handleCancelCustomizeClick = function() {\r\n                document.body.removeChild(customizePopup);\r\n                document.body.appendChild(addPopup);\r\n\r\n                while(rows.length > 0) {\r\n                    rows.pop();\r\n                }\r\n                while(count_mods.length > 0){\r\n                    count_mods.pop();\r\n                    startAsOneCheckers.pop()\r\n                    console.log(\"poppin\")\r\n                }\r\n                // Remove the event listener after it's been triggered\r\n                cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\r\n                saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\r\n            };\r\n\r\n            saveCustomizeButton.addEventListener(\"click\", handleSaveCustomizeClick);\r\n            cancelCustomizeButton.addEventListener(\"click\", handleCancelCustomizeClick);\r\n        };\r\n\r\n        // Attach event listeners to buttons\r\n        cancelItemButton.addEventListener(\"click\", handleCancelClick);\r\n        addToOrderBtn.addEventListener(\"click\", handleAddToOrderClick);\r\n        customizeBtn.addEventListener(\"click\", handleCustomizeClick);\r\n        //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}