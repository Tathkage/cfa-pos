[{"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\index.js":"1","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\pageRedirection.js":"2","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\settings.js":"3","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employeeLogin.js":"4","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\landingPage.js":"5","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\menuOrdering.js":"6","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\serverOrder.js":"7","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\managerLanding.js":"8","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\translate.js":"9","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\productsAndIngredients.js":"10","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\login.js":"11","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\inventoryFunctions.js":"12","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\logout.js":"13","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\menuFunctions.js":"14","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\reportFunctions.js":"15","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\managerLandingFunctions.js":"16","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\completeOrder.js":"17","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\popups\\changePrice.js":"18","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\popups\\buttonToggle.js":"19","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\popups\\buttonToggle.js":"20","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\popups\\confirmItem.js":"21","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\seasonalProductsAndIngredients.js":"22","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\totalProdsAndIngr.js":"23","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\template_tests\\fullStackTemplate.js":"24","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\template_tests\\componentAdderTemplate.js":"25"},{"size":298,"mtime":1699986377289,"results":"26","hashOfConfig":"27"},{"size":1232,"mtime":1699986377298,"results":"28","hashOfConfig":"27"},{"size":2566,"mtime":1699986377302,"results":"29","hashOfConfig":"27"},{"size":10472,"mtime":1699986377051,"results":"30","hashOfConfig":"27"},{"size":3085,"mtime":1699986377291,"results":"31","hashOfConfig":"27"},{"size":13412,"mtime":1699986377015,"results":"32","hashOfConfig":"27"},{"size":13535,"mtime":1699986377046,"results":"33","hashOfConfig":"27"},{"size":6310,"mtime":1699986377032,"results":"34","hashOfConfig":"27"},{"size":2403,"mtime":1699986377314,"results":"35","hashOfConfig":"27"},{"size":31259,"mtime":1699986377299,"results":"36","hashOfConfig":"27"},{"size":1132,"mtime":1699986377294,"results":"37","hashOfConfig":"27"},{"size":13260,"mtime":1699986377016,"results":"38","hashOfConfig":"27"},{"size":1172,"mtime":1699986377296,"results":"39","hashOfConfig":"27"},{"size":17068,"mtime":1699986377032,"results":"40","hashOfConfig":"27"},{"size":22073,"mtime":1699986377032,"results":"41","hashOfConfig":"27"},{"size":12596,"mtime":1699986377032,"results":"42","hashOfConfig":"27"},{"size":2442,"mtime":1699986377004,"results":"43","hashOfConfig":"27"},{"size":3597,"mtime":1699986377032,"results":"44","hashOfConfig":"27"},{"size":1819,"mtime":1699986377032,"results":"45","hashOfConfig":"27"},{"size":1819,"mtime":1699986377016,"results":"46","hashOfConfig":"27"},{"size":22601,"mtime":1699986377016,"results":"47","hashOfConfig":"27"},{"size":667,"mtime":1699986377302,"results":"48","hashOfConfig":"27"},{"size":22414,"mtime":1699986377311,"results":"49","hashOfConfig":"27"},{"size":2255,"mtime":1699986377309,"results":"50","hashOfConfig":"27"},{"size":3523,"mtime":1699986377307,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"svkqg8",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\index.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\pageRedirection.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\settings.js",["138","139","140","141","142"],[],"import React from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './landingPageStylesheet.css';\r\nimport './settings.css';\r\nimport cookie from \"react-cookies\";\r\nimport Home from \"./translate.js\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { GoogleMap } from \"@react-google-maps/api\";\r\nimport {useLoadScript} from \"@react-google-maps/api\";\r\nimport { Marker } from \"@react-google-maps/api\";\r\nimport { useMemo, useRef } from \"react\";\r\n\r\n\r\n\r\nconst Settings = () => {\r\n\r\n    let translateButtonExistRef = useRef(false);\r\n    const googleTranslateElementInit = () => {\r\n        new window.google.translate.TranslateElement(\r\n            {\r\n                pageLanguage: \"en\",\r\n                autoDisplay: false\r\n            },\r\n            \"google_translate_element\"\r\n        );\r\n    };\r\n    useEffect(() => {\r\n        if (!translateButtonExistRef.current) {\r\n            translateButtonExistRef.current = true;\r\n            const addScript = document.createElement(\"script\");\r\n            addScript.setAttribute(\r\n                \"src\",\r\n                \"https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"\r\n            );\r\n            document.body.appendChild(addScript);\r\n            window.googleTranslateElementInit = googleTranslateElementInit;\r\n            //translateButtonExistRef.current = false;\r\n        }\r\n    }, []);\r\n\r\n    //translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const changeToLanding = () =>{\r\n        //document.body.removeAttributeNode(addScript)\r\n        navigate('/landing');\r\n        // navigate('./customer_pages/menuOrdering', {state: {drinkIds}});\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div id = \"land\" className=\"grid place-items-center v-screen justify-center\">\r\n\r\n            <h1 id = \"head\" className=\"text-4xl\">\r\n                Information and Accessibility\r\n            </h1>\r\n\r\n\r\n            <div id = \"transoptions\"> Google Translate Options: </div>\r\n            <div id=\"google_translate_element\">\r\n\r\n            </div>\r\n\r\n            <div className=\"big_space\">\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div id={\"map\"}>\r\n\r\n\r\n                <Home/>\r\n\r\n\r\n            </div>\r\n\r\n            <div id = \"settings\" className=\"space-y-4\">\r\n                <button onClick={changeToLanding} className=\" text-4x1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-[3vmin] px-[5vmin] h-32 w-80 rounded-lg shadow-lg\">Back</button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employeeLogin.js",["143","144"],[],"import './employeeLogin.css';\r\nimport React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport LoginButton from \"./login\";\r\nimport LogoutButton from \"./logout\";\r\nimport { useEffect} from \"react\";\r\nimport { gapi } from 'gapi-script';\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\n\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst clientId = \"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\";\r\nconst salt = bcrypt.genSaltSync(10)\r\n/**\r\n * This function handles the overall processes that take place for all employee\r\n * authentication, login, as well as our security. It uses a database login, as well as\r\n * a Google OAuth2 login for servers to access the ordering screens.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction EmployeeLogin() {\r\n\r\n    useEffect(() => {\r\n        function start()\r\n        {\r\n            gapi.auth2.init({\r\n                client_id: clientId,\r\n                scope: \"\"\r\n            })\r\n        }\r\n\r\n        gapi.load('auth2', start);\r\n    });\r\n\r\n\r\n\r\n\r\n    let [managerNumber, setManagerNumber] = useState('');\r\n    const [managers, setManager] = useState([]);\r\n    const [employeeNumber, setEmployeeNumber] = useState('');\r\n    const [employees, setEmployee] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n    /**\r\n     * Change to the landing page on successful button click.\r\n     */\r\n    const changeToLanding = () =>{\r\n        navigate('/');\r\n        // navigate('./customer_pages/menuOrdering', {state: {drinkIds}});\r\n    }\r\n    /**\r\n     * Used to push text field data into a format that can be parsed into a JSON.\r\n     */\r\n    const [formData, setFormData] = useState({\r\n        pass: '',\r\n        user: '',\r\n    });\r\n    /**\r\n     * handleInput updates fromData for a POST API request,\r\n     * it also updates properly for employee and manager numbers.\r\n     * This information is needed so that we can use a map to verify credentials.\r\n     * @param event\r\n     */\r\n\r\n    const handleInput = (event) => {\r\n        setFormData({...formData, [event.target.name]: event.target.value})\r\n        setEmployeeNumber(event.target.value)\r\n        setManagerNumber(event.target.value)\r\n    }\r\n\r\n    /**\r\n     * This functions handles the API and backend for the manager_id.\r\n     */\r\n\r\n    function searchManager() {\r\n        axios.get(`http://localhost:3000/api/login_info?manager_id=${managerNumber}`)\r\n            .then(function(response) {\r\n\r\n                //setManagerNumber(bcrypt.hashSync((response.data), salt) );\r\n\r\n                //console.log(\"check search: \" + managerNumber)\r\n            })\r\n            .catch(function(error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * This functions handles the API and backend for the employee_id.\r\n     */\r\n    function searchEmployee() {\r\n        axios.get(`http://localhost:3000/api/login_info?server_id=${employeeNumber}`)\r\n            .then(function(response) {\r\n                setManager(response.data);\r\n            })\r\n            .catch(function(error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * This functions handles when the submit button is pressed, it\r\n     * sends the JSON with the correct information in it to the backend to be parsed in the database.\r\n     * @param event\r\n     */\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        console.log(bcrypt.hashSync(managerNumber, salt));\r\n\r\n        axios.post(`http://localhost:3000/api/userPass`,{formData}, {headers: { \"Content-Type\": \"application/json\" }})\r\n\r\n            .then(res=>{\r\n                formData.pass = bcrypt.hashSync(formData.pass, salt)\r\n                console.log(\"formData: \", formData);\r\n                let testpass = bcrypt.hashSync(\"4321\", salt)\r\n                console.log(res);\r\n                //console.log(\"formData test hash : \", testpass)\r\n\r\n                //$2a$10$F9S0/CL35hvLqik4Zq4q6OSHKuQpjN.Ek8QqNyCnnLHLjDyNAnByO\r\n                if(formData.user === \"2519\" && (formData.pass === testpass))\r\n                {\r\n                    navigate(\"/login/managerlanding\");\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        searchManager();\r\n        searchEmployee();\r\n        //console.log(\"user\" + formData.user,\"pass\" + formData.pass);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n\r\n\r\n            <div id=\"banner\">\r\n\r\n\r\n\r\n                <h1 className=\"text-5xl font-bold grid grid-cols-3 gap-4 content-center\">\r\n\r\n                    <div id=\"logo\">\r\n                        <img src={require('./images/WhiteCFAIcon.png')} alt=\"\" height=\"200\" width=\"120\"/>\r\n                    </div>\r\n\r\n\r\n                    <div id=\"back_button\" className=\"text-1xl  font-light rounded-b-lg rounded-t-lg grid place-items-center h-screen\">\r\n                        <button onClick={changeToLanding} > <img src={require('./images/backBack.png')} alt=\"\" width={\"40\"}/> </button>\r\n                    </div>\r\n\r\n                </h1>\r\n\r\n            </div>\r\n            <div className=\"custom-shape-divider-top-1682377788\" >\r\n                <svg data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1200 120\"\r\n                     preserveAspectRatio=\"none\">\r\n                    <path\r\n                        d=\"M321.39,56.44c58-10.79,114.16-30.13,172-41.86,82.39-16.72,168.19-17.73,250.45-.39C823.78,31,906.67,72,985.66,92.83c70.05,18.48,146.53,26.09,214.34,3V0H0V27.35A600.21,600.21,0,0,0,321.39,56.44Z\"\r\n                        className=\"shape-fill\"></path>\r\n                </svg>\r\n            </div>\r\n\r\n\r\n            <div id = \"manager\" className=\"drop-shadow-2x1 text-7xl text-white font-bold rounded-b-lg rounded-t-lg\">\r\n                Chick-Fil-A Employee Login\r\n            </div>\r\n\r\n            <div id = \"login\" className=\"rounded-b-lg rounded-t-lg\">\r\n\r\n                <div className=\"submit\">\r\n\r\n                    <form onSubmit ={handleSubmit} autoComplete=\"off\">\r\n\r\n                        <div id=\"spacer\">\r\n                            <label className=\"block text-white mr-48\"> </label>\r\n                        </div>\r\n                        <div id = \"serving2\" className=\"drop-shadow-2x1 text-2xl text-white font-light\">\r\n                            Manager Login\r\n\r\n                        </div>\r\n\r\n                        <hr className=\"w-96 h-px my-8 mx-auto bg-gray-100 border-0 dark:bg-gray-400\"/>\r\n                        <div id=\"field\" className=\"drop-shadow-1xl bg-white w-96 border-2 border-slate-400 h-16 rounded-b-lg rounded-t-lg grid place-items-center\">\r\n\r\n                            <input type=\"text\"\r\n                                   name=\"user\"\r\n                                   placeholder={\"Username\"}\r\n                                   onChange={handleInput}\r\n                                   autoComplete=\"off\"/>\r\n                        </div>\r\n\r\n                        <div id=\"spacer\">\r\n                            <label className=\"text-white mr-48\"> space </label>\r\n                        </div>\r\n\r\n                        <div id=\"field\" className=\"drop-shadow-1xl bg-white w-96 border-2 border-slate-400 h-16 rounded-b-lg rounded-t-lg grid place-items-center\">\r\n\r\n                            <input type=\"password\"\r\n                                   name=\"pass\"\r\n                                   placeholder={\"Password\"}\r\n                                   onChange={handleInput}\r\n                                   autoComplete=\"off\"/>\r\n                        </div>\r\n\r\n                        <hr className=\"drop-shadow-2x1 w-96 h-px my-8 mx-auto bg-gray-100 border-0 dark:bg-gray-400\"/>\r\n                        <div id = \"serving\" className=\"drop-shadow-2x1 text-2xl text-white font-light\">\r\n                            Server: <div id=\"google\">\r\n                            <GoogleOAuthProvider clientId=\"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\">\r\n                                <LoginButton/>\r\n                            </GoogleOAuthProvider>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div id=\"submit_button\" className=\"drop-shadow-2xl bg-red-600 hover:bg-red-700 active:bg-blue-950 text-1xl border-slate-400 font-light rounded-full grid place-items-center h-screen\">\r\n                            <button> Submit </button>\r\n\r\n\r\n                        </div>\r\n\r\n                    </form>\r\n\r\n                    <div className=\"spacer\">\r\n                    </div>\r\n                    <div className=\"text-1xl bg-white font-light rounded-b-lg rounded-t-lg grid place-items-center v-screen\">\r\n\r\n                        <table id=\"product-table\">\r\n                            <thead>\r\n                            <tr>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {managers.map((manager) => (\r\n                                <tr key={manager.pass}>\r\n\r\n                                    <th>unsuccessful login: try again</th>\r\n                                    {/* <td>{ manid = manager.manager_id}</td>\r\n                                            <td>{manager.first_name}</td>\r\n                                            <td>{manager.last_name}</td>\r\n                                            <td>{manpass = manager.password}</td> */}\r\n                                </tr>\r\n\r\n\r\n                            ))}\r\n\r\n\r\n                            </tbody>\r\n\r\n\r\n                            <tbody>\r\n                            {employees.map((employee) => (\r\n                                <tr key={employee.pass}>\r\n                                    <th>unsuccessful login: try again</th>\r\n                                    {/*}  <td>{employee.server_id}</td>\r\n                                            <td>{employee.first_name}</td>\r\n                                            <td>{employee.last_name}</td>\r\n                                            <td>{employee.password}</td> */}\r\n                                </tr>\r\n                            ))}\r\n\r\n\r\n                            </tbody>\r\n\r\n\r\n\r\n                        </table>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default EmployeeLogin;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\landingPage.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\menuOrdering.js",["145","146","147","148"],[],"import React from \"react\";\r\nimport './menuOrderingStylesheet.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport LogoutButton from \"../logout\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { confirmItemPopUp } from './popups/confirmItem';\r\nimport { mealItems, entreeItems, sideItems, beverageItems, saladItems, treatItems, sauceItems, dressingItems, seasonalItems } from \"../productsAndIngredients.js\";\r\nimport {placeOrder} from \"../employee_pages/managerLandingFunctions\";\r\n\r\n\r\n/**\r\n * This function is used to hold item objects inside of the cart.\r\n * @param id This parameter is deprecated but initially was used to id every item, like a Radix Sort.\r\n * @param name The name contains the name of the product in question.\r\n * @param quantity The number of items inside of the cart.\r\n * @param modifications Tracks the modifications made to the menu item.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\n\r\n\r\n\r\nfunction CartItem({ id, name, quantity, modifications }) {\r\n    if (name === \"\") {\r\n        name = \"N/A\";\r\n    }\r\n\r\n    let modificationsDisplay;\r\n    if (modifications.length > 0) {\r\n        modificationsDisplay = modifications.map((modification, index) => {\r\n            if (modification.changes.length > 0) {\r\n                return (\r\n                    <div key={index}>\r\n                        {modification.type} {modification.changes.toString()}\r\n                        <br ></br>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    } else {\r\n        modificationsDisplay = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" role=\"alert\">\r\n            <div>\r\n                x{quantity} {name}\r\n            </div>\r\n            {modificationsDisplay && (\r\n                <div>\r\n                    {modificationsDisplay}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * This template contains the code that drives our frontend for our pop-ups.\r\n * Pop-up are added and generated via a DOM-tree, and this is handled through event listeners\r\n * and various other elements that help us manage multiple autogenerated features at once.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction Template() {\r\n    const [isToggled, setIsToggled] = useState(localStorage.getItem('isToggled') === 'true');\r\n    const handleButtonClick = () => {\r\n        const newState = !isToggled;\r\n        setIsToggled(newState);\r\n        localStorage.setItem('isToggled', newState.toString());\r\n    };\r\n\r\n    const [displayedItems, setDisplayedItems] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState(\"Meals\");\r\n    const [subtotal, setSubtotal] = useState(0.00);\r\n    const [tax, setTax] = useState(0.00);\r\n    const [total, setTotal] = useState(0.00);\r\n\r\n    // Use local storage to keep cart items on page refresh\r\n    useEffect(() => {\r\n        // Get the cart items from localStorage\r\n        const storedCartItems = localStorage.getItem('cartItems');\r\n        const storedMenuItems = localStorage.getItem('menuItems');\r\n        const storedSubtotal = localStorage.getItem('subtotal');\r\n        const storedTax = localStorage.getItem('tax');\r\n        const storedTotal = localStorage.getItem('total');\r\n\r\n        // If cart items are stored in localStorage, update the displayedItems state\r\n        if (storedCartItems) {\r\n            setDisplayedItems(JSON.parse(storedCartItems));\r\n        }\r\n        if (storedMenuItems) {\r\n            setSelectedCategory(storedMenuItems);\r\n        }\r\n        if (storedSubtotal) {\r\n            setSubtotal(Number(storedSubtotal));\r\n        }\r\n        if (storedTax) {\r\n            setTax(Number(storedTax));\r\n        }\r\n        if (storedTotal) {\r\n            setTotal(Number(storedTotal));\r\n        }\r\n    }, []);\r\n\r\n    const handleAddItem = (item) => {\r\n\r\n        // Update the cart\r\n        setDisplayedItems([...displayedItems, { ...item, id: displayedItems.length + 1 }]);\r\n        let newSubtotal = parseFloat(item.price) + subtotal;\r\n        let newTax = parseFloat((newSubtotal * 0.082).toFixed(2));\r\n        let newTotal = newSubtotal + newTax;\r\n        setSubtotal(newSubtotal);\r\n        setTax(newTax);\r\n        setTotal(newTotal);\r\n\r\n        // Update local storage with cart item, subtotal, tax, and total\r\n        localStorage.setItem('cartItems', JSON.stringify([...displayedItems, { ...item, id: displayedItems.length + 1 }]));\r\n        localStorage.setItem('subtotal', String(newSubtotal));\r\n        localStorage.setItem('tax', String(newTax));\r\n        localStorage.setItem('total', String(newTotal));\r\n    };\r\n\r\n    /**\r\n     * This handles the removing of items from the cart via an index that is assigned to every item like an id.\r\n     * An item is given into the function and an index is accessed that locates, and deletes said object from the cart array.\r\n     * @param item This parameter represents a single item sent into the function meant to remove it from the cart array.\r\n     */\r\n    const handleRemoveItem = (item) => {\r\n        // Find the index of the item to be removed\r\n        const index = displayedItems.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n        // Remove the item from the displayedItems array using splice\r\n        const updatedDisplayedItems = [...displayedItems];\r\n        updatedDisplayedItems.splice(index, 1);\r\n\r\n        // Update the cart\r\n        setDisplayedItems(updatedDisplayedItems);\r\n\r\n        let newSubtotal = subtotal - item.price;\r\n        let newTax = parseFloat((newSubtotal * 0.082).toFixed(2));\r\n        let newTotal = newSubtotal + newTax;\r\n        setSubtotal(newSubtotal);\r\n        setTax(newTax);\r\n        setTotal(newTotal);\r\n\r\n        // Store the updated displayedItems, subtotal, tax, and total in localStorage\r\n        localStorage.setItem('cartItems', JSON.stringify(updatedDisplayedItems));\r\n        localStorage.setItem('subtotal', String(newSubtotal));\r\n        localStorage.setItem('tax', String(newTax));\r\n        localStorage.setItem('total', String(newTotal));\r\n    };\r\n\r\n    const handlePlaceOrderButtonClick = async (cart) => {\r\n        try {\r\n            const response = await placeOrder(cart, total);\r\n            localStorage.clear();\r\n            navigate(\"/\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            alert('An error occurred while placing an order.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function is used to render all menu items based on the descriptions given in the\r\n     * productsAndIngredients.js file.\r\n     * @returns {*} Nothing is returned, instead the frontend is updated to reflect the changes that the user makes.\r\n     */\r\n    const renderMenuItems = () => {\r\n\r\n        let items = [];\r\n        switch (selectedCategory) { // Update the rendered items based on the current menu\r\n            case 'Meals':\r\n                items = mealItems;\r\n                break;\r\n            case 'Entrees':\r\n                items = entreeItems;\r\n                break;\r\n            case 'Sides':\r\n                items = sideItems;\r\n                break;\r\n            case 'Beverages':\r\n                items = beverageItems;\r\n                break;\r\n            case 'Salads':\r\n                items = saladItems;\r\n                break;\r\n            case 'Treats':\r\n                items = treatItems;\r\n                break;\r\n            case 'Sauces':\r\n                items = sauceItems;\r\n                break;\r\n            case 'Dressings':\r\n                items = dressingItems;\r\n                break;\r\n            case 'Seasonals':\r\n                items = seasonalItems;\r\n                break;\r\n            // Add other cases for different menus if needed\r\n            default:\r\n                items = mealItems;\r\n                break;\r\n        }\r\n\r\n        return items.map((item, index) => (\r\n            <button\r\n                key={index}\r\n                className={isToggled ? 'zoom itemTile rounded-lg flex flex-col justify-center items-center':'itemTile rounded-lg flex flex-col justify-center items-center'}\r\n                onClick={() => { confirmItemPopUp(item, handleAddItem) }}\r\n            >\r\n                <h1 className=\"tile-marker text-black text-4vmin\" style={{ maxWidth: '100%' }}>{item.name}</h1>\r\n                <img className=\"foodBox left-0 bottom-0\" src={require(`../${item.image}`)} alt=\"chicken sandwich\" style={{ maxWidth: '100%' }} />\r\n                <h2 className=\"text-black text-3vmin\" style={{ maxWidth: '100%' }}>${item.price}</h2>\r\n            </button>\r\n        ));\r\n    };\r\n    /**\r\n     * Selects the category based off of the localStorage component, it is used to switch between\r\n     * the different menu options on the left sidebar.\r\n     * @param category\r\n     */\r\n    // Handler for button click event\r\n    const handleCategoryClick = (category) => {\r\n        setSelectedCategory(category);\r\n        localStorage.setItem('menuItems', category);\r\n        renderMenuItems();\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const cancelOrder = () =>{\r\n        localStorage.removeItem('cartItems');\r\n        localStorage.removeItem('menuItems');\r\n        localStorage.removeItem('subtotal');\r\n        localStorage.removeItem('tax');\r\n        localStorage.removeItem('total');\r\n        navigate(\"/\");\r\n    }\r\n\r\n    return(\r\n\r\n        <div>\r\n\r\n            <div className=\"topbar h-[10vh] text-center content-center text-[3vw] text-white\">\r\n                Welcome to Chick-fil-A!\r\n            </div>\r\n            <button onClick={handleButtonClick} className=\"toggleZoom\">\r\n                {isToggled ? <img src={require('../images/magnifyglassx.png')} width='60vh'/> : <img src={require('../images/magnifyglass.png')} width='60vh'/>}\r\n            </button>\r\n\r\n\r\n\r\n            <div className=\"sidebar\">\r\n                {/* START SIDEBAR */}\r\n                {['Meals', 'Entrees', 'Sides', 'Beverages', 'Salads', 'Treats', 'Sauces', 'Dressings', 'Seasonals'].map((label, index) => (\r\n                    <button\r\n                        key={index}\r\n                        type=\"button\"\r\n                        className={isToggled ? 'zoom h-[10vh] w-[15vw] bg-primary pt-2.5 pb-2.5 text-[2.1vw] font-medium leading-normal text-black border border-solid border-gray-200 shadow-sm transition duration-150 ease-in-out hover:shadow-md focus:outline-none focus:ring-0 active:shadow-lg zoom': \"h-[10vh] w-[15vw] bg-primary pt-2.5 pb-2.5 text-[2.1vw] font-medium leading-normal text-black border border-solid border-gray-200 shadow-sm transition duration-150 ease-in-out hover:shadow-md focus:outline-none focus:ring-0 active:shadow-lg\"}\r\n                        onClick={() => handleCategoryClick(label)}\r\n                    >\r\n                        {label}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            {/*END SIDEBAR*/}\r\n\r\n            {/*START MENU ITEMS*/}\r\n            <div className=\"menuBlocks overflow-y-scroll\">\r\n                <div className=\"container m-auto grid grid-cols-3 gap-[2.5vmin]\">\r\n                    {renderMenuItems()}\r\n                </div>\r\n            </div>\r\n            {/*END MENU ITEMS*/}\r\n\r\n\r\n            <div className=\"cart grow rounded-md overflow-y-scroll\" style={{ flexDirection: \"space-between\" }}>\r\n                <div className=\"cart-header text-center font-size-4 text-black\">\r\n                    Your Cart\r\n                </div>\r\n                <div className=\"cart-items text-black \" style={{ flexGrow: 1 }}>\r\n                    {displayedItems.map((item, index) => (\r\n                        <div className=\"h-16 w-60 relative\" key={index}>\r\n                            <div className=\"max-w-[calc(100%-1.5rem)] pl-2 zoom\">\r\n                                <CartItem\r\n                                    name={item.name}\r\n                                    quantity={item.quantity}\r\n                                    modifications={item.modifications}\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                onClick={() => handleRemoveItem(item)}\r\n                                className=\"absolute right-0 top-0 text-red-700\"\r\n                            >\r\n                                X\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"cart-elements\">\r\n                    <div className={isToggled ? \"zoom place-order\" : \"place-order\"}>\r\n                        <button onClick={() => handlePlaceOrderButtonClick(displayedItems)}>\r\n                            Place Order\r\n                        </button>\r\n                    </div>\r\n                    <div className={isToggled ? \"zoom cancel-order\" : \"cancel-order\"}>\r\n                        <button onClick={() => cancelOrder()} className=\"\">\r\n                            Cancel Order\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"order-pricing\">\r\n                        <div>Subtotal: ${subtotal.toFixed(2)}</div>\r\n                        <div>Tax: ${tax.toFixed(2)}</div>\r\n                        <div>Total: ${total.toFixed(2)}</div>\r\n                    </div>\r\n                </div>\r\n                &nbsp;\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Template;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\serverOrder.js",["149","150","151","152"],[],"import React from \"react\";\r\nimport '../customer_pages/menuOrderingStylesheet.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport LogoutButton from \"../logout\";\r\nimport { confirmItemPopUp } from '../customer_pages/popups/confirmItem';\r\nimport { confirmPricePopUp } from './popups/changePrice';\r\nimport { mealItems, entreeItems, sideItems, beverageItems, saladItems, treatItems, sauceItems, dressingItems, seasonalItems } from \"../productsAndIngredients\";\r\nimport {placeOrder} from \"./managerLandingFunctions\";\r\nimport {GoogleOAuthProvider} from \"@react-oauth/google\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\n/**\r\n * This function is used to hold item objects inside of the cart.\r\n * @param id This parameter is deprecated but initially was used to id every item, like a Radix Sort.\r\n * @param name The name contains the name of the product in question.\r\n * @param quantity The number of items inside of the cart.\r\n * @param modifications Tracks the modifications made to the menu item.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction CartItem({ id, name, quantity, modifications }) {\r\n    if (name === \"\") {\r\n        name = \"N/A\";\r\n    }\r\n\r\n    console.log(modifications);\r\n\r\n    let modificationsDisplay;\r\n    if (modifications.length > 0) {\r\n        modificationsDisplay = modifications.map((modification, index) => {\r\n            if (modification.changes.length > 0) {\r\n                return (\r\n                    <div key={index}>\r\n                        {modification.type} {modification.changes.toString()}\r\n                        <br ></br>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    } else {\r\n        modificationsDisplay = null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" role=\"alert\">\r\n            <div>\r\n                x{quantity} {name}\r\n            </div>\r\n            {modificationsDisplay && (\r\n                <div>\r\n                    {modificationsDisplay}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * This template contains the code that drives our frontend for our pop-ups.\r\n * Pop-up are added and generated via a DOM-tree, and this is handled through event listeners\r\n * and various other elements that help us manage multiple autogenerated features at once.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction Template2() {\r\n\r\n    const [displayedItems, setDisplayedItems] = useState([]);\r\n    const [selectedCategory, setSelectedCategory] = useState(\"Meals\");\r\n    const [subtotal, setSubtotal] = useState(0.00);\r\n    const [tax, setTax] = useState(0.00);\r\n    const [total, setTotal] = useState(0.00);\r\n\r\n    // Use local storage to keep cart items on page refresh\r\n    useEffect(() => {\r\n        // Get the cart items from localStorage\r\n        const storedCartItems = localStorage.getItem('cartItems');\r\n        const storedMenuItems = localStorage.getItem('menuItems');\r\n        const storedSubtotal = localStorage.getItem('subtotal');\r\n        const storedTax = localStorage.getItem('tax');\r\n        const storedTotal = localStorage.getItem('total');\r\n\r\n        // If cart items are stored in localStorage, update the displayedItems state\r\n        if (storedCartItems) {\r\n            setDisplayedItems(JSON.parse(storedCartItems));\r\n        }\r\n        if (storedMenuItems) {\r\n            setSelectedCategory(storedMenuItems);\r\n        }\r\n        if (storedSubtotal) {\r\n            setSubtotal(Number(storedSubtotal));\r\n        }\r\n        if (storedTax) {\r\n            setTax(Number(storedTax));\r\n        }\r\n        if (storedTotal) {\r\n            setTotal(Number(storedTotal));\r\n        }\r\n    }, []);\r\n\r\n    const handleAddItem = (item) => {\r\n\r\n        // Update the cart\r\n        setDisplayedItems([...displayedItems, { ...item, id: displayedItems.length + 1 }]);\r\n        let newSubtotal = parseFloat(item.price) + subtotal;\r\n        let newTax = parseFloat((newSubtotal * 0.082).toFixed(2));\r\n        let newTotal = newSubtotal + newTax;\r\n        setSubtotal(newSubtotal);\r\n        setTax(newTax);\r\n        setTotal(newTotal);\r\n\r\n        // Update local storage with cart item, subtotal, tax, and total\r\n        localStorage.setItem('cartItems', JSON.stringify([...displayedItems, { ...item, id: displayedItems.length + 1 }]));\r\n        localStorage.setItem('subtotal', String(newSubtotal));\r\n        localStorage.setItem('tax', String(newTax));\r\n        localStorage.setItem('total', String(newTotal));\r\n    };\r\n\r\n    /**\r\n     * This handles the removing of items from the cart via an index that is assigned to every item like an id.\r\n     * An item is given into the function and an index is accessed that locates, and deletes said object from the cart array.\r\n     * @param item This parameter represents a single item sent into the function meant to remove it from the cart array.\r\n     */\r\n    const handleRemoveItem = (item) => {\r\n        // Find the index of the item to be removed\r\n        const index = displayedItems.findIndex(cartItem => cartItem.id === item.id);\r\n\r\n        // Remove the item from the displayedItems array using splice\r\n        const updatedDisplayedItems = [...displayedItems];\r\n        updatedDisplayedItems.splice(index, 1);\r\n\r\n        // Update the cart\r\n        setDisplayedItems(updatedDisplayedItems);\r\n\r\n        let newSubtotal = subtotal - item.price;\r\n        let newTax = parseFloat((newSubtotal * 0.082).toFixed(2));\r\n        let newTotal = newSubtotal + newTax;\r\n        setSubtotal(newSubtotal);\r\n        setTax(newTax);\r\n        setTotal(newTotal);\r\n\r\n        // Store the updated displayedItems, subtotal, tax, and total in localStorage\r\n        localStorage.setItem('cartItems', JSON.stringify(updatedDisplayedItems));\r\n        localStorage.setItem('subtotal', String(newSubtotal));\r\n        localStorage.setItem('tax', String(newTax));\r\n        localStorage.setItem('total', String(newTotal));\r\n    };\r\n\r\n    const handlePlaceOrderButtonClick = async (cart) => {\r\n        try {\r\n            const response = await placeOrder(cart, total);\r\n            console.log(total);\r\n            localStorage.clear();\r\n            navigate(\"/\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            alert('An error occurred while placing an order.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function is used to render all menu items based on the descriptions given in the\r\n     * productsAndIngredients.js file.\r\n     * @returns {*} Nothing is returned, instead the frontend is updated to reflect the changes that the user makes.\r\n     */\r\n    const renderMenuItems = () => {\r\n\r\n        console.log(selectedCategory);\r\n        let items = [];\r\n        switch (selectedCategory) { // Update the rendered items based on the current menu\r\n            case 'Meals':\r\n                items = mealItems;\r\n                break;\r\n            case 'Entrees':\r\n                items = entreeItems;\r\n                break;\r\n            case 'Sides':\r\n                items = sideItems;\r\n                break;\r\n            case 'Beverages':\r\n                items = beverageItems;\r\n                break;\r\n            case 'Salads':\r\n                items = saladItems;\r\n                break;\r\n            case 'Treats':\r\n                items = treatItems;\r\n                break;\r\n            case 'Sauces':\r\n                items = sauceItems;\r\n                break;\r\n            case 'Dressings':\r\n                items = dressingItems;\r\n                break;\r\n            case 'Seasonals':\r\n                items = seasonalItems;\r\n                break;\r\n            // Add other cases for different menus if needed\r\n            default:\r\n                items = mealItems;\r\n                break;\r\n        }\r\n\r\n        return items.map((item, index) => (\r\n            <button\r\n                key={index}\r\n                className=\"itemTile rounded-lg flex flex-col justify-center items-center\"\r\n                onClick={() => { confirmItemPopUp(item, handleAddItem) }}\r\n            >\r\n                <h1 className=\"tile-marker text-black text-4vmin\" style={{ maxWidth: '100%' }}>{item.name}</h1>\r\n                <img className=\"foodBox left-0 bottom-0\" src={require(`../${item.image}`)} alt=\"chicken sandwich\" style={{ maxWidth: '100%' }} />\r\n                <h2 className=\"text-black text-3vmin\" style={{ maxWidth: '100%' }}>${item.price}</h2>\r\n            </button>\r\n        ));\r\n    };\r\n    /**\r\n     * Selects the category based off of the localStorage component, it is used to switch between\r\n     * the different menu options on the left sidebar.\r\n     * @param category\r\n     */\r\n        // Handler for button click event\r\n    const handleCategoryClick = (category) => {\r\n            setSelectedCategory(category);\r\n            localStorage.setItem('menuItems', category);\r\n            renderMenuItems();\r\n        };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const cancelOrder = () =>{\r\n        localStorage.removeItem('cartItems');\r\n        localStorage.removeItem('menuItems');\r\n        localStorage.removeItem('subtotal');\r\n        localStorage.removeItem('tax');\r\n        localStorage.removeItem('total');\r\n        navigate(\"/\");\r\n    }\r\n\r\n    const handleChangePrice = (newSubtotal) => {\r\n\r\n        let newTax = parseFloat((newSubtotal * 0.082).toFixed(2));\r\n        let newTotal = newSubtotal + newTax;\r\n        setSubtotal(newSubtotal);\r\n        setTax(newTax);\r\n        setTotal(newTotal);\r\n\r\n        // Update local storage with subtotal, tax, and total\r\n        localStorage.setItem('subtotal', String(newSubtotal));\r\n        localStorage.setItem('tax', String(newTax));\r\n        localStorage.setItem('total', String(newTotal));\r\n    };\r\n\r\n    return(\r\n\r\n        <div>\r\n\r\n            <div className=\"topbar h-[10vh] text-center content-center text-[3vw] text-white\">\r\n                Welcome to Chick-fil-A!\r\n            </div>\r\n\r\n\r\n            <div className=\"sidebar\">\r\n                {/* START SIDEBAR */}\r\n                {['Meals', 'Entrees', 'Sides', 'Beverages', 'Salads', 'Treats', 'Sauces', 'Dressings', 'Seasonals'].map((label, index) => (\r\n                    <button\r\n                        key={index}\r\n                        type=\"button\"\r\n                        className={`h-[10vh] w-[15vw] bg-primary pt-2.5 pb-2.5 text-[2.1vw] font-medium leading-normal text-black border border-solid border-gray-200 shadow-sm transition duration-150 ease-in-out hover:shadow-md focus:outline-none focus:ring-0 active:shadow-lg`}\r\n                        onClick={() => handleCategoryClick(label)}\r\n                    >\r\n                        {label}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            {/*END SIDEBAR*/}\r\n\r\n            {/*START MENU ITEMS*/}\r\n            <div className=\"menuBlocks overflow-y-scroll\">\r\n                <div className=\"container m-auto grid grid-cols-3 gap-[2.5vmin]\">\r\n                    {renderMenuItems()}\r\n                </div>\r\n            </div>\r\n            {/*END MENU ITEMS*/}\r\n\r\n\r\n            <div className=\"cart grow rounded-md overflow-y-scroll\" style={{ flexDirection: \"space-between\" }}>\r\n                <div className=\"cart-header text-center font-size-4 text-black\">\r\n                    Your Cart\r\n                </div>\r\n                <div className=\"cart-items text-black \" style={{ flexGrow: 1 }}>\r\n                    {displayedItems.map((item, index) => (\r\n                        <div className=\"h-16 w-60 relative\" key={index}>\r\n                            <div className=\"max-w-[calc(100%-1.5rem)] pl-2\">\r\n                                <CartItem\r\n                                    name={item.name}\r\n                                    quantity={item.quantity}\r\n                                    modifications={item.modifications}\r\n                                />\r\n                            </div>\r\n                            <button\r\n                                onClick={() => handleRemoveItem(item)}\r\n                                className=\"absolute right-0 top-0 text-red-700\"\r\n                            >\r\n                                X\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"cart-elements\">\r\n                    <div className=\"order-price-change\">\r\n                        <button onClick={() => confirmPricePopUp(subtotal, handleChangePrice)} className=\"\">\r\n                            Edit Pricing\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"place-order\">\r\n                        <button onClick={() => handlePlaceOrderButtonClick(displayedItems)} className=\"\">\r\n                            Place Order\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"cancel-order\">\r\n                        <button onClick={() => cancelOrder()} className=\"\">\r\n                            Cancel Order\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"order-pricing\">\r\n                        <div>Subtotal: ${subtotal.toFixed(2)}</div>\r\n                        <div>Tax: ${tax.toFixed(2)}</div>\r\n                        <div>Total: ${total.toFixed(2)}</div>\r\n                    </div>\r\n                </div>\r\n                &nbsp;\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Template2;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\managerLanding.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\translate.js",["153","154","155","156","157"],[],"/*global google*/\r\n\r\n/*body > iframe {\r\n    display: none;\r\n}*/\r\n/*import React, { useMemo } from 'react';\r\nimport { GoogleMap} from \"@react-google-maps/api\";\r\nimport {useLoadScript} from \"@react-google-maps/api\";\r\nimport { Marker } from \"@react-google-maps/api\";\r\nimport './settings.css';\r\n\r\nfunction Map(){\r\n    const Home = () =>{\r\n        const { isLoaded } = useLoadScript({\r\n            googleMapsApiKey: \"AIzaSyDYjDm1SrG_fXhstY_M7rpkinQwFBTtT5M\",\r\n        })\r\n    }\r\n\r\n    const center = useMemo(() => ({ lat: 18.52043, lng: 73.856743 }), []);\r\n\r\n    return(\r\n\r\n    <GoogleMap\r\n        zoom={10}\r\n        center={center}\r\n        mapContainerClassName=\"map-container\">\r\n        <Marker position={center} />\r\n    </GoogleMap>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default Map; */\r\nimport React, {useMemo} from 'react';\r\nimport { GoogleMap, useJsApiLoader, Marker } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n    width: '400px',\r\n    height: '400px'\r\n};\r\n\r\n/*const center = {\r\n    lat: 18.52043,\r\n    lng: 73.856743\r\n};*/\r\n\r\n\r\nfunction MyComponent() {\r\n\r\n    const { isLoaded } = useJsApiLoader({\r\n        id: 'google-map-script',\r\n        googleMapsApiKey: \"AIzaSyDYjDm1SrG_fXhstY_M7rpkinQwFBTtT5M\"\r\n    });\r\n\r\n    const [map, setMap] = React.useState(null);\r\n    const [markerPosition, setMarkerPosition] = React.useState(null);\r\n\r\n    const handleMapClick = (event) => {\r\n        setMarkerPosition({\r\n            lat: event.latLng.lat(),\r\n            lng: event.latLng.lng()\r\n        });\r\n    };\r\n    const center = useMemo(() => ({ lat: 30.6129, lng:-96.3405 }), []);\r\n\r\n    const onLoad = React.useCallback(function callback(map) {\r\n        // This is just an example of getting and using the map instance!!! don't just blindly copy!\r\n        const bounds = new window.google.maps.LatLngBounds(center);\r\n        //map.fitBounds(bounds);\r\n        setMap(map);\r\n    }, []);\r\n\r\n    const onUnmount = React.useCallback(function callback(map) {\r\n        setMap(null);\r\n    }, []);\r\n\r\n\r\n    return isLoaded ? (\r\n        <GoogleMap\r\n            mapContainerStyle={containerStyle}\r\n            center={center}\r\n            zoom={17}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n        >\r\n            {markerPosition && (\r\n                <Marker position={markerPosition} />\r\n            )}\r\n        </GoogleMap>\r\n    ) : <></>;\r\n}\r\n\r\nexport default React.memo(MyComponent);\r\n","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\productsAndIngredients.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\login.js",["158","159"],[],"import { GoogleLogin } from '@react-oauth/google';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\nconst clientId = \"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\";\r\n\r\n\r\n/**\r\n * This funct\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\n\r\n\r\nfunction Login(){\r\n\r\n    const navigate = useNavigate();\r\n    const changeToLanding = () =>{\r\n        navigate('/login/server');\r\n        // navigate('./customer_pages/menuOrdering', {state: {drinkIds}});\r\n    }\r\n    const onSuccess = (res) => {\r\n        changeToLanding()\r\n    }\r\n    const onFailure = (res) => {\r\n        console.log(\"login fails :\" + res)\r\n    }\r\n\r\n    return(\r\n        <GoogleOAuthProvider clientId=\"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\">\r\n\r\n        <div id = \"signInButton\">\r\n            <GoogleLogin\r\n                onSuccess={onSuccess}\r\n                onError={() => {\r\n                    console.log('Login Failed');\r\n                }}\r\n            />;\r\n        </div>\r\n\r\n        </GoogleOAuthProvider>\r\n    )\r\n}\r\n\r\nexport default Login;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\inventoryFunctions.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\logout.js",["160","161"],[],"import { googleLogout } from '@react-oauth/google';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { GoogleOAuthProvider } from '@react-oauth/google';\r\n\r\nconst clientId = \"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\";\r\n\r\nfunction Logout(){\r\n    const navigate = useNavigate();\r\n    const changeToLogin = () =>{\r\n        googleLogout()\r\n        navigate('/login');\r\n        // navigate('./customer_pages/menuOrdering', {state: {drinkIds}});\r\n    }\r\n    const OnSuccess = (res) => {\r\n        console.log(\"logout works\")\r\n        changeToLogin()\r\n    }\r\n\r\n    return(\r\n        <GoogleOAuthProvider clientId=\"701943938891-m4tuu3ab7rui5fu18kgesgdnvn5bplg3.apps.googleusercontent.com\">\r\n\r\n        <div id = \"signOutButton\" className=\"justify-center items-center text-center content-center drop-shadow-2xl w-24 h-8 bg-red-500 hover:bg-red-700 active:bg-blue-950 text-2xl border-slate-400 font-light rounded-full\">\r\n            <googleLogout/>\r\n            <button onClick={changeToLogin} className=\"justify-center items-center text-center\" > Logout </button>\r\n        </div>\r\n        </GoogleOAuthProvider>\r\n\r\n    )\r\n}\r\nexport default Logout;","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\menuFunctions.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\reportFunctions.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\managerLandingFunctions.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\completeOrder.js",["162","163","164"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * This function sets up the structure for how the cart and json connections work.\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nfunction CompleteOrder() {\r\n    const [productNumber, setProductNumber] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const url = \"http://localhost:3000/\"\r\n\r\n    const [databaseQuery, setDatabaseQuery] = useState({\r\n        product_id: ''\r\n    });\r\n\r\n    const handleInput = (event) => {\r\n        setProductNumber(event.target.value)\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        axios.post(url,{ databaseQuery: { product_id: productNumber } }, { headers: { \"Content-Type\": \"application/json\" }})\r\n            .then(res => {\r\n                console.log(res);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        searchProduct();\r\n    }\r\n\r\n    function searchProduct() {\r\n        axios.get(`http://localhost:3000//api/data/:productInfo/data?product_number=${productNumber}`)\r\n            .then(function(response) {\r\n                setProducts(response.data);\r\n            })\r\n            .catch(function(error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function clearTable() {\r\n        setProducts([]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>Complete Order</header>\r\n            <label htmlFor=\"product-number\">Product Number:</label>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <input type=\"text\" name=\"product_id\" onChange={handleInput} /><br /><br />\r\n                <button>Submit</button>\r\n\r\n            </form>\r\n\r\n\r\n            <br /><br />\r\n            <table id=\"product-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Product Number</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {products.map((product) => (\r\n                    <tr key={product.product_number}>\r\n                        <td>{product.product_number}</td>\r\n                        <td>{product.name}</td>\r\n                        <td>{product.price}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CompleteOrder;\r\n","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\popups\\changePrice.js",["165","166"],[],"import {disableButtons, enableButtons} from './buttonToggle.js';\r\nimport '../serverOrder.js';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nlet isPoppedUp = false;\r\n\r\n\r\nexport const confirmPricePopUp = (price, changePrice) => {\r\n\r\n    if (!isPoppedUp) {\r\n\r\n        // Only allow addPopup buttons to be clicked\r\n        disableButtons();\r\n\r\n        /////////////////\r\n        // Pop Up HTML //\r\n        /////////////////\r\n\r\n                const changePriceUpdate = `\r\n          <div class=\"flex justify-between items-center mt-4\">\r\n            <label for=\"priceInput\">New Subtotal: $</label>\r\n            <input type=\"number\" id=\"priceInput\" class=\"border border-gray-400 px-4 py-2 rounded\" min=\"0\" step=\"0.01\" value=\"${price}\">\r\n          </div>\r\n          <div class=\"flex justify-end mt-4\">\r\n            <button id=\"updatePriceBtn\" class=\"bg-green-500 text-white px-4 py-2 mr-2 rounded\">Update Price</button>\r\n            <button id=\"cancelBtn\" class=\"bg-red-500 text-white px-4 py-2 rounded\">Cancel</button>\r\n          </div>\r\n        `;\r\n\r\n        // Create addPopup\r\n        const addPopup = document.createElement(\"div\");\r\n        addPopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\r\n        addPopup.innerHTML = changePriceUpdate;\r\n\r\n        // Allow dimming of non-addPopup elements\r\n        const dimElement = document.createElement(\"div\");\r\n        dimElement.classList.add(\"fixed\", \"inset-0\", \"bg-black\", \"opacity-50\", \"z-40\");\r\n\r\n        // Dim non-addPopup elements and add addPopup\r\n        document.body.appendChild(dimElement);\r\n        document.body.appendChild(addPopup);\r\n\r\n        isPoppedUp = true;\r\n\r\n        ////////////////////////\r\n        // Pop up button logic //\r\n        ////////////////////////\r\n\r\n        // Add \"Cancel\" and \"Update Price\" buttons to the pop-up\r\n        const cancelBtn = document.getElementById(\"cancelBtn\");\r\n        const updatePriceBtn = document.getElementById(\"updatePriceBtn\");\r\n\r\n        // Define the event handler function for \"Cancel\" button\r\n        const handleCancelClick = function() {\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n            cancelBtn.removeEventListener(\"click\", handleCancelClick);\r\n        };\r\n\r\n        // Define the event handler function for \"Update Price\" button\r\n        const handleUpdatePriceClick = function() {\r\n            // Get the new subtotal from the input field\r\n            const priceInput = document.getElementById(\"priceInput\");\r\n            const newSubtotal = parseFloat(priceInput.value);\r\n\r\n            // Update the item object with the new subtotal\r\n            changePrice(newSubtotal);\r\n\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n            updatePriceBtn.removeEventListener(\"click\", handleUpdatePriceClick);\r\n        };\r\n\r\n        // Attach event listeners to buttons\r\n        cancelBtn.addEventListener(\"click\", handleCancelClick);\r\n        updatePriceBtn.addEventListener(\"click\", handleUpdatePriceClick);\r\n    }\r\n};\r\n\r\n","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\employee_pages\\popups\\buttonToggle.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\popups\\buttonToggle.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\customer_pages\\popups\\confirmItem.js",["167"],[],"import {disableButtons, enableButtons} from './buttonToggle.js';\r\nimport '../menuOrdering.js';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nlet isPoppedUp = false;\r\n\r\n\r\n/**\r\n * rows holds all of the modifications for the menu item that is currently loaded.\r\n */\r\nconst rows = [];\r\n\r\n//holds all of the data pertaining to counting how many modifications are made. this has a one to one correlation with rows.\r\nconst count_mods = [];\r\n\r\n//used to track original state of count_mods, true if count_mods[i] == 1, false if count_mods[i] == 0\r\nconst startAsOneCheckers = [];\r\n\r\n/**\r\n * MyComponent is a function that auto-generates div's based on the item.customs object property in the productsAndIngredients.js.\r\n * For example, if I had three items in custom, the function would auto-generate 3 divs with buttons.\r\n */\r\n\r\nexport const MyComponent = function() {\r\n    const divElements = [];\r\n    // this function populates the menu item with all of the proper modifications\r\n    // the plus and minus buttons need functionality\r\n    let count = 0;\r\n    for (let i = 0; i < rows.length; i++) {\r\n        divElements.push(\r\n            <div className=\"h-24 grid grid-cols-4 gap-3 content-start  ...\">\r\n                <div><p className=\"text-gray-600 px-4 py-2 mt-4 mr-1 rounded\"> {rows[i]} </p> </div>\r\n                <div><button id=\"plusMod\" className=\"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\">+</button></div>\r\n                <div id={\"counter\"} className=\"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\"> {count_mods[i]} </div>\r\n                <div> <button id=\"minusMod\" className=\"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\">-</button></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <div className = \"overflow-y-scroll h-64\">{divElements}</div>;\r\n}\r\n/**\r\n * If an item is clicked, this handler is called in order to make sure that a few things can happen.\r\n * The first thing is that the item properly needs to load, which is why item is a parameter in our function.\r\n * The next thing it needs to achieve is make sure that the modifications are loading properly,\r\n * and that buttons with listeners are also being assigned and removed when needed.\r\n * @param item\r\n * @param handleCartItems\r\n */\r\nexport const confirmItemPopUp = (item, handleCartItems) => {\r\n\r\n    if (!isPoppedUp) {\r\n\r\n        // Only allow addPopup buttons to be clicked\r\n        disableButtons();\r\n\r\n        /////////////\r\n        // Pop Ups //\r\n        /////////////\r\n\r\n        // Add item to order pop up\r\n        /**\r\n         * This const is used as a generic template to load the products when the button is pressed.\r\n         * @type {string}\r\n         */\r\n        const addToOrderPopup = `\r\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\r\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\r\n            <p class=\"text-gray-600\">Price: $${item.price}</p>\r\n            <button id=\"customizeBtn\" class=\"bg-blue-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Customize Ingredients</button>\r\n            <input type=\"number\" id=\"quantityInput\" class=\"border border-gray-400 px-4 py-2 mt-4 mr-4 rounded\" min=\"1\" max=\"10\" value=\"1\">\r\n            <button id=\"addToOrderBtn\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Add to Your Order</button>\r\n            <button id=\"cancelBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 absolute top-0 right-0 mr-4 mt-4 rounded\">Cancel</button>\r\n        `;\r\n        //turn this into a function!\r\n\r\n\r\n        // Customize item pop up\r\n        /**\r\n         * This const is used as a templated for the modifications needed for loading the proper data.\r\n         * @type {string}\r\n         */\r\n        const customizeIngredientsPopup = `\r\n            <h2 class=\"mb-4 font-bold text-lg\">${item.name}</h2>\r\n            <img src=\"${require(`../../${item.image}`)}\" alt=\"${item.name}\" class=\"w-64 h-64 mb-4\">\r\n  \r\n                <div id=\"my-component-container\"></div>\r\n\r\n                \r\n            <p class=\"text-gray-600\">Price: $${item.price}</p>              \r\n                    \r\n            <button id=\"cancelCustomizeBtn\" class=\"bg-red-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Cancel Changes</button>\r\n            <button id=\"customizeItem\" class=\"bg-green-500 text-white px-4 py-2 mt-4 mr-4 rounded\">Save Changes</button>\r\n        `;\r\n\r\n        // Create addPopup\r\n        const addPopup = document.createElement(\"div\");\r\n        addPopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\r\n        //addPopup.insertAdjacentHTML();\r\n        addPopup.innerHTML = addToOrderPopup;\r\n\r\n        // Create customizePopup\r\n        const customizePopup = document.createElement(\"div\");\r\n        customizePopup.className = \"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-8 rounded-md z-50\";\r\n        customizePopup.innerHTML = customizeIngredientsPopup;\r\n\r\n        // Allow dimming of non-addPopup elements\r\n        const dimElement = document.createElement(\"div\");\r\n        dimElement.classList.add(\"fixed\", \"inset-0\", \"bg-black\", \"opacity-50\", \"z-40\");\r\n\r\n        // Dim non-addPopup elements and add addPopup\r\n        document.body.appendChild(dimElement);\r\n        document.body.appendChild(addPopup);\r\n\r\n        isPoppedUp = true;\r\n\r\n        //////////////////////\r\n        // Pop up buttons //\r\n        //////////////////////\r\n\r\n        // Add \"Cancel\" button to close pop-up\r\n        const cancelItemButton = document.getElementById(\"cancelBtn\");\r\n        const addToOrderBtn = document.getElementById(\"addToOrderBtn\");\r\n        const customizeBtn = document.getElementById(\"customizeBtn\");\r\n\r\n\r\n        // Define the event handler function for \"Cancel\" button\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        const handleCancelClick = function() {\r\n\r\n            item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n            cancelItemButton.removeEventListener(\"click\", handleCancelClick);\r\n\r\n            while(rows.length > 0) {\r\n                rows.pop();\r\n            }\r\n            while(count_mods.length > 0){\r\n                count_mods.pop();\r\n                startAsOneCheckers.pop()\r\n                console.log(\"poppin\")\r\n            }\r\n\r\n            rows.length = 0;\r\n            count_mods.length = 0;\r\n            startAsOneCheckers.length = 0;\r\n\r\n        };\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        // Define the event handler function for \"Add to Order\" button\r\n        const handleAddToOrderClick = function() {\r\n            // Handle add to order functionality with quantity\r\n            const quantityInput = document.getElementById(\"quantityInput\");\r\n            // Update the item object with the quantity\r\n            item.quantity = parseInt(quantityInput.value);\r\n            handleCartItems(item);\r\n\r\n            // Close the addPopup\r\n            document.body.removeChild(addPopup);\r\n            document.body.removeChild(dimElement);\r\n            isPoppedUp = false;\r\n\r\n            // Enable all buttons outside the addPopup\r\n            enableButtons();\r\n\r\n            // Remove the event listener after it's been triggered\r\n\r\n            addToOrderBtn.removeEventListener(\"click\", handleAddToOrderClick);\r\n            while(rows.length > 0) {\r\n                rows.pop();\r\n            }\r\n            while(count_mods.length > 0){\r\n                count_mods.pop();\r\n            }\r\n            item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n        };\r\n\r\n        /**\r\n         * This button is used to handle when a button in cancelled and terminating the correct listeners,\r\n         * and adding new listeners when needed.\r\n         */\r\n        // Define the event handler function for \"Customize\" button\r\n        const handleCustomizeClick = function() {\r\n            for (let i = 0; i < item.custom.length + 1; i++) {\r\n                // if an ingredient is in custom, this will be made true.\r\n                // if an ingredient starts at 1 for a default then\r\n                // this will be made true\r\n                //\r\n                //let startAsDefault = false;\r\n\r\n                for(let j = 0; j < item.ingredients.length; j++) {\r\n\r\n                    if(item.custom[j] === item.ingredients[i])\r\n                    {\r\n                        count_mods[j] = 1;\r\n                        //startAsDefault = true;\r\n                        console.log(\"rows[j] = \" + item.ingredients[j])\r\n                        //startAsOneCheckers.push(true);\r\n                        startAsOneCheckers[j] = true;\r\n                        //item.modifications.find(mod => mod.type === '+').changes.push(item.ingredients[j]);\r\n                        //break;\r\n                    }\r\n\r\n                }\r\n                    //startAsOneCheckers.push(false);\r\n                    rows.push(item.custom[i]);\r\n                    //we start all modifications at zero, if .\r\n                    count_mods[i] = 0;\r\n                    startAsOneCheckers[i] = false;\r\n\r\n            }\r\n            count_mods.pop()\r\n            rows.pop()\r\n            startAsOneCheckers.pop()\r\n\r\n            console.log(count_mods)\r\n            console.log(startAsOneCheckers)\r\n\r\n            //startAsOneCheckers.pop()\r\n\r\n            document.body.removeChild(addPopup);\r\n            document.body.appendChild(customizePopup);\r\n            //this render component autogenerated the modifications div elements everytime the handle customize is clicked\r\n\r\n            ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n\r\n            //minimize these functions on the left :0 --> handlePlusMod, --> handleMinusMod\r\n            const handlePlusMod = (num) => {\r\n                //code is very convoluted, sorry in advance but im scared of touching anything because it could break :D\r\n                //message me if you need an explanation on the code!!!\r\n                //handleMinusMod is much easier to go through, I would recommend going through there if contacting me isn't time efficient\r\n\r\n                return function() {\r\n                    let toMod;\r\n                    toMod = rows[num]\r\n                    console.log(\"plus: \" + toMod);\r\n\r\n                    //i track count_mods[num] to make sure it goes from 0 - 2 range.\r\n                    if(count_mods[num] < 2 && count_mods[num]  >= 0) {\r\n                        count_mods[num] = count_mods[num] + 1;\r\n\r\n                        if(count_mods[num] > 2){\r\n                            count_mods[num] = 2;\r\n                            return;\r\n                        }\r\n                        //if we start at 1 (ie: a default ingredient), like pickles on a chicken sandwich\r\n                        //some of this code might not even be used tbh im scared to touch it tbh\r\n                        if(startAsOneCheckers[num] === true) {\r\n\r\n                            if (count_mods[num] === 1) {\r\n                                console.log(\"countnums (plus): \" + count_mods[num])\r\n                                console.log(\"rows (plus): \" + rows[num])\r\n\r\n                                //item.modifications.find(mod => mod.type === '-').changes.pop();\r\n                                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num])\r\n                                console.log(\"Index (plus): \" + index)\r\n                                if(index !== -1){\r\n                                    item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\r\n                                }\r\n                            }\r\n\r\n                            if (count_mods[num] === 2) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            if (count_mods[num] === 0) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n                        }\r\n                            //if we start at 0, ie: ingredients you can add on, but are not default on the item, like tomatoes on a chicken sandwich\r\n                        //ditto above statement D:\r\n\r\n                        else if(startAsOneCheckers[num] === false) {\r\n\r\n                            if (count_mods[num] === 1) {\r\n                                //item.modifications.find(mod => mod.type === '-').changes.pop();\r\n                                let index = item.modifications.find(mod => mod.type === '-').changes.indexOf(rows[num])\r\n                                if(index !== -1){\r\n                                    item.modifications.find(mod => mod.type === '-').changes.splice(index, 1);\r\n                                    console.log(\"test plus 1\");\r\n                                }\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n\r\n                            }\r\n\r\n                            if (count_mods[num] === 2) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            if (count_mods[num] === 0) {\r\n                                item.modifications.find(mod => mod.type === '+').changes.push(toMod);\r\n                            }\r\n\r\n                            console.log(count_mods[num]);\r\n                        }\r\n\r\n                        ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n                        console.log(item.modifications.filter(mod => mod.type === '+'));\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n            const handleMinusMod = (num) => {\r\n                return function() {\r\n                    let toMod;\r\n                    toMod = rows[num]\r\n                    //same logic as plus, but flipped logic,\r\n                    // this code is much more concise and easier to read through if you're just trying to get a basic understanding\r\n                    // of my modification logic\r\n\r\n                    if(count_mods[num] <= 2 && count_mods[num]  >= 0) {\r\n                        count_mods[num] = count_mods[num] - 1;\r\n\r\n                        if(count_mods[num] < 0){\r\n                            count_mods[num] = 0;\r\n                            return;\r\n                        }\r\n\r\n                        if (item.modifications) {\r\n                            const plusMod = item.modifications.find(mod => mod.type === '+');\r\n\r\n                            if (plusMod) {\r\n                                //console.log(\"count_mod[num]: \" + count_mods[num]);\r\n                                console.log(\"rows[num]: \" + rows[num]);\r\n\r\n                                if(startAsOneCheckers[num] === true){\r\n                                    if(count_mods[num] === 0){\r\n                                        console.log(\"minus === 0\")\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        console.log(\"Index (minus) :\" + index)\r\n                                        if(index !== -1){\r\n                                            console.log(\"index: \" + index)\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                        item.modifications.find(mod => mod.type === '-').changes.push(toMod);\r\n\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 1) {\r\n                                        /*while( item.modifications.find(mod => mod.type === '+').changes.length > 0){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        }*/\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 2){\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                //console.log(\"start as checker test: \" + startAsOneCheckers[num])\r\n\r\n                                if (startAsOneCheckers[num] === false){\r\n                                    if(count_mods[num] === 0){\r\n                                        //console.log(\"test 0 case again..\")\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                        //item.modifications.find(mod => mod.type === '+').changes.pop();\r\n\r\n                                        //item.modifications.find(mod => mod.type === '-').changes.push(toMod);\r\n                                    }\r\n\r\n                                    if(count_mods[num] === 1){\r\n                                        //console.log(\"test 1 case again..\")\r\n                                        //console.log(\"minus: \" + toMod);\r\n                                        let index = item.modifications.find(mod => mod.type === '+').changes.indexOf(rows[num])\r\n                                        if(index !== -1){\r\n                                            item.modifications.find(mod => mod.type === '+').changes.splice(index, 1);\r\n                                        }\r\n                                    }\r\n\r\n\r\n\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ReactDOM.render(<MyComponent />, document.getElementById('my-component-container'));\r\n                    }\r\n\r\n                }\r\n            }\r\n            const displayCountModNumbers = document.getElementsByClassName(\"bg-blue-500 w-8 h-9 text-white px-2.5 py-2 mt-4 mr-1 rounded\");\r\n            const plusMods = document.getElementsByClassName(\"bg-green-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\r\n            const minusMods = document.getElementsByClassName(\"bg-red-500 text-white px-4 py-2 mt-4 mr-1 rounded\");\r\n\r\n            for (let i = 0; i < plusMods.length; i++) {\r\n                plusMods[i].addEventListener(\"click\", handlePlusMod(i) );\r\n            }\r\n            for (let i = 0; i < displayCountModNumbers.length; i++) {\r\n                minusMods[i].addEventListener(\"click\", handleMinusMod(i) );\r\n            }\r\n\r\n            const saveCustomizeButton = document.getElementById(\"customizeItem\");\r\n            //Define the event handler function for \"Cancel\" button in customizePopup\r\n            const handleSaveCustomizeClick = function() {\r\n                document.body.removeChild(customizePopup);\r\n                document.body.appendChild(addPopup);\r\n\r\n\r\n                // Remove the event listener after it's been triggered\r\n                saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\r\n                cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\r\n                //console.log(item.modifications.find(mod => mod.type === '+').toString());\r\n\r\n                //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n\r\n                rows.length = 0;\r\n                count_mods.length = 0;\r\n\r\n            };\r\n\r\n            const cancelCustomizeButton = document.getElementById(\"cancelCustomizeBtn\");\r\n\r\n            const handleCancelCustomizeClick = function() {\r\n                document.body.removeChild(customizePopup);\r\n                document.body.appendChild(addPopup);\r\n\r\n                while(rows.length > 0) {\r\n                    rows.pop();\r\n                }\r\n                while(count_mods.length > 0){\r\n                    count_mods.pop();\r\n                    startAsOneCheckers.pop()\r\n                    console.log(\"poppin\")\r\n                }\r\n                // Remove the event listener after it's been triggered\r\n                cancelCustomizeButton.removeEventListener(\"click\", handleCancelCustomizeClick);\r\n                saveCustomizeButton.removeEventListener(\"click\", handleSaveCustomizeClick);\r\n            };\r\n\r\n            saveCustomizeButton.addEventListener(\"click\", handleSaveCustomizeClick);\r\n            cancelCustomizeButton.addEventListener(\"click\", handleCancelCustomizeClick);\r\n        };\r\n\r\n        // Attach event listeners to buttons\r\n        cancelItemButton.addEventListener(\"click\", handleCancelClick);\r\n        addToOrderBtn.addEventListener(\"click\", handleAddToOrderClick);\r\n        customizeBtn.addEventListener(\"click\", handleCustomizeClick);\r\n        //item.modifications = [{type: '+', changes: []}, {type: '-', changes: []}];\r\n\r\n\r\n\r\n\r\n    }\r\n};\r\n\r\n","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\seasonalProductsAndIngredients.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\totalProdsAndIngr.js",[],[],"C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\template_tests\\fullStackTemplate.js",["168","169","170"],[],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction ProductSearch() {\r\n    const [productNumber, setProductNumber] = useState('');\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const url = \"http://localhost:5000/\"\r\n\r\n    const [databaseQuery, setDatabaseQuery] = useState({\r\n        product_id: ''\r\n    });\r\n\r\n    const handleInput = (event) => {\r\n        setProductNumber(event.target.value)\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        axios.post(url,{ databaseQuery: { product_id: productNumber } }, { headers: { \"Content-Type\": \"application/json\" }})\r\n            .then(res => {\r\n                console.log(res);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        searchProduct();\r\n    }\r\n\r\n    function searchProduct() {\r\n        axios.get(`http://localhost:5000//api/data/:productInfo/data?product_number=${productNumber}`)\r\n            .then(function(response) {\r\n                setProducts(response.data);\r\n            })\r\n            .catch(function(error) {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    function clearTable() {\r\n        setProducts([]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"product-number\">Product Number:</label>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n            <input type=\"text\" name=\"product_id\" onChange={handleInput} /><br /><br />\r\n                <button>Submit</button>\r\n\r\n            </form>\r\n\r\n\r\n            <br /><br />\r\n            <table id=\"product-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th>Product Number</th>\r\n                    <th>Name</th>\r\n                    <th>Price</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {products.map((product) => (\r\n                    <tr key={product.product_number}>\r\n                        <td>{product.product_number}</td>\r\n                        <td>{product.name}</td>\r\n                        <td>{product.price}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductSearch;\r\n","C:\\Programming\\TAMU\\CSCE 331\\cfa-pos\\src\\template_tests\\componentAdderTemplate.js",[],[],{"ruleId":"171","severity":1,"message":"172","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":14},{"ruleId":"171","severity":1,"message":"175","line":9,"column":10,"nodeType":"173","messageId":"174","endLine":9,"endColumn":19},{"ruleId":"171","severity":1,"message":"176","line":10,"column":9,"nodeType":"173","messageId":"174","endLine":10,"endColumn":22},{"ruleId":"171","severity":1,"message":"177","line":11,"column":10,"nodeType":"173","messageId":"174","endLine":11,"endColumn":16},{"ruleId":"171","severity":1,"message":"178","line":12,"column":10,"nodeType":"173","messageId":"174","endLine":12,"endColumn":17},{"ruleId":"171","severity":1,"message":"179","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":20},{"ruleId":"171","severity":1,"message":"180","line":42,"column":23,"nodeType":"173","messageId":"174","endLine":42,"endColumn":34},{"ruleId":"171","severity":1,"message":"179","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":20},{"ruleId":"171","severity":1,"message":"181","line":158,"column":19,"nodeType":"173","messageId":"174","endLine":158,"endColumn":27},{"ruleId":"182","severity":1,"message":"183","line":252,"column":30,"nodeType":"184","endLine":252,"endColumn":94},{"ruleId":"182","severity":1,"message":"183","line":252,"column":97,"nodeType":"184","endLine":252,"endColumn":160},{"ruleId":"171","severity":1,"message":"179","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":20},{"ruleId":"171","severity":1,"message":"185","line":9,"column":9,"nodeType":"173","messageId":"174","endLine":9,"endColumn":28},{"ruleId":"171","severity":1,"message":"186","line":11,"column":13,"nodeType":"173","messageId":"174","endLine":11,"endColumn":22},{"ruleId":"171","severity":1,"message":"181","line":153,"column":19,"nodeType":"173","messageId":"174","endLine":153,"endColumn":27},{"ruleId":"171","severity":1,"message":"187","line":1,"column":10,"nodeType":"188","messageId":"174","endLine":1,"endColumn":16},{"ruleId":"171","severity":1,"message":"189","line":56,"column":12,"nodeType":"173","messageId":"174","endLine":56,"endColumn":15},{"ruleId":"171","severity":1,"message":"190","line":59,"column":11,"nodeType":"173","messageId":"174","endLine":59,"endColumn":25},{"ruleId":"171","severity":1,"message":"191","line":69,"column":15,"nodeType":"173","messageId":"174","endLine":69,"endColumn":21},{"ruleId":"192","severity":1,"message":"193","line":72,"column":8,"nodeType":"194","endLine":72,"endColumn":10,"suggestions":"195"},{"ruleId":"171","severity":1,"message":"196","line":4,"column":7,"nodeType":"173","messageId":"174","endLine":4,"endColumn":15},{"ruleId":"171","severity":1,"message":"197","line":24,"column":11,"nodeType":"173","messageId":"174","endLine":24,"endColumn":20},{"ruleId":"171","severity":1,"message":"196","line":5,"column":7,"nodeType":"173","messageId":"174","endLine":5,"endColumn":15},{"ruleId":"171","severity":1,"message":"198","line":14,"column":11,"nodeType":"173","messageId":"174","endLine":14,"endColumn":20},{"ruleId":"171","severity":1,"message":"199","line":15,"column":12,"nodeType":"173","messageId":"174","endLine":15,"endColumn":25},{"ruleId":"171","severity":1,"message":"200","line":15,"column":27,"nodeType":"173","messageId":"174","endLine":15,"endColumn":43},{"ruleId":"171","severity":1,"message":"201","line":45,"column":14,"nodeType":"173","messageId":"174","endLine":45,"endColumn":24},{"ruleId":"171","severity":1,"message":"202","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":13},{"ruleId":"171","severity":1,"message":"203","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":16},{"ruleId":"171","severity":1,"message":"204","line":29,"column":9,"nodeType":"173","messageId":"174","endLine":29,"endColumn":14},{"ruleId":"171","severity":1,"message":"199","line":10,"column":12,"nodeType":"173","messageId":"174","endLine":10,"endColumn":25},{"ruleId":"171","severity":1,"message":"200","line":10,"column":27,"nodeType":"173","messageId":"174","endLine":10,"endColumn":43},{"ruleId":"171","severity":1,"message":"201","line":40,"column":14,"nodeType":"173","messageId":"174","endLine":40,"endColumn":24},"no-unused-vars","'cookie' is defined but never used.","Identifier","unusedVar","'GoogleMap' is defined but never used.","'useLoadScript' is defined but never used.","'Marker' is defined but never used.","'useMemo' is defined but never used.","'LogoutButton' is defined but never used.","'setEmployee' is assigned a value but never used.","'response' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'GoogleOAuthProvider' is defined but never used.","'PropTypes' is defined but never used.","'google' is defined but never used.","Program","'map' is assigned a value but never used.","'handleMapClick' is assigned a value but never used.","'bounds' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'center'. Either include it or remove the dependency array.","ArrayExpression",["205"],"'clientId' is assigned a value but never used.","'onFailure' is assigned a value but never used.","'OnSuccess' is assigned a value but never used.","'databaseQuery' is assigned a value but never used.","'setDatabaseQuery' is assigned a value but never used.","'clearTable' is defined but never used.","'React' is defined but never used.","'ReactDOM' is defined but never used.","'count' is assigned a value but never used.",{"desc":"206","fix":"207"},"Update the dependencies array to be: [center]",{"range":"208","text":"209"},[1881,1883],"[center]"]